Repair : lang_53
Current failed test : org.apache.commons.lang.time.DateUtilsTest::testRoundLang346 | 2019.09.07 AD at 21:05:51 CDT
Location : org.apache.commons.lang.time.DateUtils.modify:[676, 689, 621, 625, 635, 636, 637, 640, 641, 642, 643, 649, 650, 658, 659, 660, 664, 665, 666, 670, 671, 672, 673, 675, 692, 696, 697, 699, 729, 730, 731, 733, 735, 738, 739]#0.7071067811865475
Compute Candidate : 2019.09.07 AD at 21:06:20 CDT - 2019.09.07 AD at 22:43:13 CDT , PNumber : 8790, CandNumber : 1009 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+return ;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+return ;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+return ;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+return ;
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+return ;
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+return ;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+return ;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+return ;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+return ;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+return ;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
+return ;
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+return ;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+return ;
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+return ;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+return ;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+return ;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
+return ;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
+return ;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+continue;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+continue;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+continue;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+continue;
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+continue;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+return ;
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+return ;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+return ;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+return ;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+return ;
 }else {
 val.add(fields[i][0],1);
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+return ;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+return ;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+return ;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+return ;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2908/pattern-ver1-serial/edu.usc.cssl.tacit.topicmodel.lda.ui.src.edu.usc.cssl.tacit.topicmodel.lda.ui.LdaTopicModelView.java-run.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+continue;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7285/pattern-ver1-serial/src.game.Board.java-advanceGame.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==8){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/7671/pattern-ver1-serial/vipr-portal.portal.app.controllers.resources.FileSystems.java-extractTypeFromId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==8){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/7671/pattern-ver1-serial/vipr-portal.portal.app.controllers.resources.FileSystems.java-extractTypeFromId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==8){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/7671/pattern-ver1-serial/vipr-portal.portal.app.controllers.resources.FileSystems.java-extractTypeFromId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==8){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/7671/pattern-ver1-serial/vipr-portal.portal.app.controllers.resources.FileSystems.java-extractTypeFromId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
-long time=date.getTime();
+ long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+ int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+ int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
-boolean done=false;
+ boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
-boolean roundUp=false;
+ boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round&&millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round&&seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round&&minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>1){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==0){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==0){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==0){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==0){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>=280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>=((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;time<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+long millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+long seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+long minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+long max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/1);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-1;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-1);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-1)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<=500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds<=30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round||minutes<=30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<=fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<=fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:46:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+offset=val.get(Calendar.DATE)-1;
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+offset=val.get(Calendar.HOUR_OF_DAY);
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
+offset=val.get(fields[i][0])-min;
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Collection;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,myUid;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Collection;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0,myUid;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0,DEFAULT_TIMEOUT2;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>3){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+default :
+
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7688/pattern-ver1-serial/cluster.src.main.java.io.servicefabric.cluster.ClusterMembership.java-processUpdates.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-offset,0);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V39/7029/pattern-ver1-serial/app.src.main.java.hu.bme.simonyi.acstudio.analogchaosinventoryapp.inventory.TreeCreator.java-createTree.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs>500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds>30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round||minutes>30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i>fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j>fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+break;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+break;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+break;
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+break;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset==0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((time-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((millisecs-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((field-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((seconds-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((minutes-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+break;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field<=DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field<=Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field<=Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]<=field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+float max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+break;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;i--){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<fields[i].length;j--){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+date+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+time+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+millisecs+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+done+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+seconds+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+minutes+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+roundUp+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(time==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(millisecs==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(seconds==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(minutes==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+val+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+round+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()==time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/5945/pattern-ver1-serial/app.src.main.java.me.diskstation.ammon.gpsrunner.ui.CalendarFragment.java-onActionItemClicked.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field>=DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field>=Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field>=Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]>=field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)!=280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset!=((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset<((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5482/pattern-ver1-serial/src.main.java.capstat.model.Match.java-calculateStartingPlayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][1],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[1][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[1][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[i][1]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum(fields[i][1]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][1])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][1],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][1])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[1][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum(fields[1][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field!=DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field!=Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field!=Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]!=field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+Integer millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+Integer seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+Integer min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+Integer max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+Integer minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+Integer offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.set(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/5982/pattern-ver1-serial/app.models.Game.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-offset,1);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2568/pattern-ver1-serial/src.framework.scuba.domain.AllocLoc.java-AllocLoc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][i],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-2;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-2);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-2)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=7){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5258/pattern-ver1-serial/GeoRecon.src.main.java.com.ontotext.ehri.georecon.Reconciler.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,localLevel;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0,localLevel;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+case 203 :
+
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[0][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[0][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[0][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum(fields[0][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[0][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[0][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[0][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][0]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][1]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/1721/pattern-ver1-serial/src.util.window.SetFilterDialog.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset<0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset==((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6762/pattern-ver1-serial/metastore.src.java.org.apache.hadoop.hive.metastore.hbase.HBaseFilterPlanUtil.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][2],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][2]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[i][2]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum(fields[i][2]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][2])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][2],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][2])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[2][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[2][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[2][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.add(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2994/pattern-ver1-serial/src.Model.java-clusterData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
-done=true;
+done=round;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/1892/pattern-ver1-serial/toolbelt.src.main.java.com.simplifyops.toolbelt.ToolBelt.java-ansiColorOutput.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
-done=true;
+done=round;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/1892/pattern-ver1-serial/toolbelt.src.main.java.com.simplifyops.toolbelt.ToolBelt.java-ansiColorOutput.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
-done=true;
+done=done;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/1892/pattern-ver1-serial/toolbelt.src.main.java.com.simplifyops.toolbelt.ToolBelt.java-ansiColorOutput.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field>DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field>Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field>Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]>field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==4){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==4){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==4){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==4){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-time)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-millisecs)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-seconds)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-minutes)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-max)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset>0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+case 10 :
+
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+case -1 :
+
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2443/pattern-ver1-serial/src.main.java.nl.rutgerkok.pokkit.world.PokkitBlockFace.java-toBukkit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;i++,new ArrayList<KeyBinding>()){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<fields[i].length;j++,new ArrayList<KeyBinding>()){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/4);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+case 13 :
+
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/5275/pattern-ver1-serial/src.edu.uiuc.groupmessage.GroupMessageProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.ArrayList;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.get(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/5881/pattern-ver1-serial/aslibrary.src.main.java.com.hitomi.aslibrary.ActivityManager.java-getPreActivity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[j][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6755/pattern-ver1-serial/api.src.main.java.org.apidesign.html.leaflet.api.MultiPolygon.java-parseHelper.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==5){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==5){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==5){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==5){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Set;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/2.0);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
-long time=date.getTime();
+Long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/3545/pattern-ver1-serial/nifi-nar-bundles.nifi-framework-bundle.nifi-framework.nifi-framework-core.src.main.java.org.apache.nifi.controller.StandardFlowFileQueue.java-summarize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+}
+if(offset>=15){
+offset-=15;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+}
+if(offset>=12){
+offset-=12;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset<=((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4868/pattern-ver1-serial/src.main.java.com.offbynull.portmapper.pcp.messages.PcpResponse.java-dump.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
+case 0 :
+
+return ;
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
+time=time-(time*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
-time=time-(seconds*1000L);
+time=time-(time*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-offset,offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1588/pattern-ver1-serial/app.src.main.java.dorespek.lenlroosterapp.Rooster.java-setDagen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
+case 401 :
+
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+case 27 :
+
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;millisecs++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;seconds++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 22:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;time++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;minutes++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)<280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1401/pattern-ver1-serial/XMLC.src.Learner.PLTFH.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
+if(field>=Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2968/pattern-ver1-serial/src.project4.Critter.java-wrapX.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+case 4 :
+
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,_afterComposeMethodCache;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0,_afterComposeMethodCache;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ final int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ final int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ final int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+ final int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+ final int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ final int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+ final int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ final int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+ final int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ final int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
-long time=date.getTime();
+ Date date=val.getTime();
+ long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
-long time=date.getTime();
+ long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ Date date=val.getTime();
 long time=date.getTime();
-boolean done=false;
+ boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
-boolean roundUp=false;
+ boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
-boolean offsetSet=false;
+ boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
-long time=date.getTime();
-boolean done=false;
+ long time=date.getTime();
+ boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
-long time=date.getTime();
+ long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
-boolean roundUp=false;
+ boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
-long time=date.getTime();
+ long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
-boolean offsetSet=false;
+ boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+ int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-offset,-1);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/314/pattern-ver1-serial/android.src.main.java.notification.templates.TextFieldTemplate.java-getGraphicComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.HOUR_OF_DAY){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+int millisecs=val.get(Calendar.HOUR_OF_DAY);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/2982/pattern-ver1-serial/src.ca.cumulonimbus.barometernetwork.BarometerNetworkActivity.java-buildHumanDateRangeFormat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.HOUR_OF_DAY){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+int seconds=val.get(Calendar.HOUR_OF_DAY);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/2982/pattern-ver1-serial/src.ca.cumulonimbus.barometernetwork.BarometerNetworkActivity.java-buildHumanDateRangeFormat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
+if(field==Calendar.HOUR_OF_DAY){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+int minutes=val.get(Calendar.HOUR_OF_DAY);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/2982/pattern-ver1-serial/src.ca.cumulonimbus.barometernetwork.BarometerNetworkActivity.java-buildHumanDateRangeFormat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
+break;
+default :
+
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4504/pattern-ver1-serial/microsoftband.src.main.java.org.md2k.microsoftband.PrefsFragmentMicrosoftBandSettings.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.getInstance().get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+Date date=val.getInstance().getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+int millisecs=val.getInstance().get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+int seconds=val.getInstance().get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+int minutes=val.getInstance().get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.getInstance().add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
-val.setTime(date);
+val.getInstance().setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Iterator;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==-1){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Iterator;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==-1){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Iterator;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==-1){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Iterator;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==-1){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+offset++;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
+offset++;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
+millisecs++;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
+seconds++;
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
+millisecs++;
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+minutes++;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+millisecs++;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+seconds++;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
+min++;
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
+max++;
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+time++;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+time++;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+i++;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+i++;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+i++;
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
-if(!offsetSet){
+if(true){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
+i++;
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+millisecs--;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+seconds--;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+minutes--;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+offset--;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+time--;
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+time--;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+time--;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<=500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<=fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<=500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<=fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<=500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds<=30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<=500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round||minutes<=30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds<=30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<=fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+i--;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+i--;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+i--;
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
+seconds++;
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
-if(!offsetSet){
+if(offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round||minutes<=30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<=fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4843/pattern-ver1-serial/src.com.jhuster.eweightscale.widget.ChartDateSelector.java-ChartDateSelector.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round&&millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round&&seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round&&millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round&&minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field!=0){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field!=0){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field!=0){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
+if(field!=0){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+synchronized(val){
 val.add(fields[i][0],1);
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+synchronized(date){
 date.setTime(time);
+}
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+synchronized(val){
 val.setTime(date);
+}
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+val.clear();
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.clear();
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+val.clear();
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
+val.clear();
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+val.clear();
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+val.clear();
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.clear();
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
+val.clear();
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+val.clear();
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get((int)(Calendar.YEAR))>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+int millisecs=val.get((int)(Calendar.MILLISECOND));
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+int seconds=val.get((int)(Calendar.SECOND));
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+int minutes=val.get((int)(Calendar.MINUTE));
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
+val.clear();
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5684/pattern-ver1-serial/src.main.java.act.handler.builtin.controller.RequestHandlerProxy.java-_releaseResourceCollections.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+val.clear();
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+val.clear();
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+val.clear();
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+val.clear();
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+val.clear();
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
+val.clear();
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
+val.clear();
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V29/5799/pattern-ver1-serial/src.main.java.mcjty.rftools.blocks.crafter.CrafterBaseTE.java-undo.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
+val.clear();
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
+val.clear();
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+val.clear();
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+val.clear();
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+synchronized(val){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+}
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+val.clear();
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5250/pattern-ver1-serial/src.it.rate.view.WidgetUpdate.java-updateTopUrlsList.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
+val.clear();
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5250/pattern-ver1-serial/src.it.rate.view.WidgetUpdate.java-updateTopUrlsList.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds<1)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round||minutes<1)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/960/pattern-ver1-serial/src.main.java.cz.zcu.kiv.eegdatabase.wui.ui.lists.components.ResearchGroupSelectForm.java-ResearchGroupSelectForm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/960/pattern-ver1-serial/src.main.java.cz.zcu.kiv.eegdatabase.wui.ui.lists.components.ResearchGroupSelectForm.java-ResearchGroupSelectForm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/(int)2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0,continentName,countryCode;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0,continentName,countryCode;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+break;
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+break;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+break;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+break;
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+break;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
+break;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+}
+if(val==null){
+return ;
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+if(val==null){
+return ;
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
 }
+if(val==null){
+return ;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
 }
+return ;
 }
+if(val==null){
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
 }
+if(val==null){
+return ;
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
+if(val==null){
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+if(val==null){
+return ;
+}
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+if(val==null){
+return ;
+}
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(val==null){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
+if(val==null){
+return ;
+}
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+if(val==null){
+return ;
+}
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
+if(val==null){
+return ;
+}
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
+if(val==null){
+return ;
+}
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+if(val==null){
+return ;
+}
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(val==null){
+return ;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if(val==null){
+return ;
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
+if(val==null){
+return ;
+}
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;i++,Charset.forName("UTF-8")){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<fields[i].length;j++,Charset.forName("UTF-8")){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+if(val!=null){
 val.add(fields[i][0],1);
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(date!=null){
 date.setTime(time);
+}
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+if(val!=null){
 val.setTime(date);
+}
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Collection;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
+if(date==null){
+return ;
+}
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3593/pattern-ver1-serial/velvetdb-mapdb.src.main.java.com.zakgof.db.velvet.mapdb.MapDbVelvet.java-isBelow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+if(val==null){
+return ;
+}
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
+if(val==null){
+return ;
+}
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+if(val==null){
+return ;
+}
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
+return ;
+}
+if(val==null){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(date==null){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+}
+if(offset==0){
+return ;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+}
+if(offsetSet==false){
+return ;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(time-(seconds*1000L)!=0){
 time=time-(seconds*1000L);
+}
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(time-millisecs!=0){
 time=time-millisecs;
+}
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
+if(val.get(fields[i][0])-min!=0){
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+}
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(time>0){
 date.setTime(time);
+}
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+if("index".equals(val)){
+return ;
+}
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+if("index".equals(val)){
+return ;
+}
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if("index".equals(val)){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if("index".equals(field)){
+return ;
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
+if("index".equals(val)){
+return ;
+}
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+if("index".equals(val)){
+return ;
+}
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if("index".equals(field)){
+return ;
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if("index".equals(val)){
+return ;
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if("index".equals(field)){
+return ;
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if("index".equals(date)){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+if(val.equals("TIME")){
+return ;
+}
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+if(val.equals("TIME")){
+return ;
+}
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+if(val.equals("TIME")){
+return ;
+}
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(val.equals("TIME")){
+return ;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(val.equals("TIME")){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if(val.equals("TIME")){
+return ;
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+}
+if("&null".equals(val)){
+return ;
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+if("&null".equals(val)){
+return ;
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
 }
+if("&null".equals(val)){
+return ;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
+}
+if("&null".equals(val)){
+return ;
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
 }
+if("&null".equals(field)){
+return ;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
 }
+if("&null".equals(round)){
+return ;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
+}
+if("&null".equals(field)){
+return ;
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
+}
+if("&null".equals(round)){
+return ;
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
+if("&null".equals(date)){
+return ;
+}
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
+if("&null".equals(time)){
+return ;
+}
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+}
+if(val.equals("DATETIME")){
+return ;
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+if(val.equals("DATETIME")){
+return ;
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+if(val.equals("DATETIME")){
+return ;
+}
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
 }
+if(val.equals("DATETIME")){
+return ;
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
 }
+return ;
 }
+if(val.equals("DATETIME")){
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
+if(val.equals("DATETIME")){
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
+time=time-minutes*60000L*100;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>(max-min*100/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(30-(fields[i][0]),1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][0],30-(1));
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(30-(fields[i][0]),val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ final int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ final int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ final int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ final int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ final Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ final int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+ final int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
-boolean done=false;
+ @SuppressWarnings("UnusedAssignment") boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ @SuppressWarnings("UnusedAssignment") int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
-boolean done=false;
+ @SuppressWarnings("UnusedAssignment") boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ @SuppressWarnings("UnusedAssignment") int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
-boolean roundUp=false;
+ @SuppressWarnings("UnusedAssignment") boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
-boolean offsetSet=false;
+ @SuppressWarnings("UnusedAssignment") boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
-boolean roundUp=false;
+ @SuppressWarnings("UnusedAssignment") boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
-boolean offsetSet=false;
+ @SuppressWarnings("UnusedAssignment") boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+ @SuppressWarnings("UnusedAssignment") int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
-boolean done=false;
+ @SuppressWarnings("UnusedAssignment") boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ @SuppressWarnings("UnusedAssignment") int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
-Date date=val.getTime();
+ @SuppressWarnings("UnusedAssignment") Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+ @SuppressWarnings("UnusedAssignment") int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
+ @SuppressWarnings("UnusedAssignment") int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val=val;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+if(val!=null){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
+}
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
+if(date!=null){
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+}
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+field=field;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field+field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field+time==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field+millisecs==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field+seconds==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field+minutes==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
+if(date.equals("")){
+return ;
+}
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+if(i==4){
+continue;
+}
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if(i==4){
+continue;
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(i==4){
+continue;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+if(i==4){
+continue;
+}
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+if(i==4){
+continue;
+}
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+if(i==4){
+continue;
+}
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+}
+if(i==4){
+continue;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(millisecs!=0){
 time=time-millisecs;
+}
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/186/pattern-ver1-serial/src.ClassAdminBackEnd.Project.java-incHistogramcount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if((seconds*1000L)!=0){
 time=time-(seconds*1000L);
+}
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/186/pattern-ver1-serial/src.ClassAdminBackEnd.Project.java-incHistogramcount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
+if((minutes*60000L)!=0){
 time=time-(minutes*60000L);
+}
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/186/pattern-ver1-serial/src.ClassAdminBackEnd.Project.java-incHistogramcount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(!round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
+if(roundUp!=offset>((max-min)/2)){
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+}
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
+min=1000;
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(true){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(true){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(true){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(true){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(true){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if(field<0){
+return ;
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(field<0){
+return ;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+if(field<0){
+return ;
+}
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+if(field<0){
+return ;
+}
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
+if(field<0){
+return ;
+}
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+if(date!=null){
 val.setTime(date);
+}
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
-time=time-millisecs;
+time=field;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000/2){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+int a=0;
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+int a=0;
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
+int a=0;
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
+int a=0;
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+int a=0;
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+int a=0;
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
+int a=0;
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+int a=0;
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+int a=0;
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
+int a=0;
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
+time=time-minutes*60000L*5;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>(max-min*5/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
-done=true;
+done=false;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+done=true;
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
-done=true;
+done=false;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+done=true;
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
-done=true;
+done=false;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+done=true;
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
-done=true;
+done=false;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+done=true;
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>(1.0/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(date+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(time+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(done+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(millisecs+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(val+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(val.equals(field)){
+return ;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(val.equals(round)){
+return ;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
+if(min==0.0){
+continue;
+}
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(min==0.0){
+continue;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(max==0.0){
+continue;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+String OUTSTRING="";
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+String OUTSTRING="";
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
+String OUTSTRING="";
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
+String OUTSTRING="";
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+String OUTSTRING="";
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+String OUTSTRING="";
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+String OUTSTRING="";
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+String OUTSTRING="";
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+String OUTSTRING="";
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+String OUTSTRING="";
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+i++;
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:15:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+i++;
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
 for(int j=0;j<fields[i].length;j++){
+i++;
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+i++;
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
+i++;
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
+i++;
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+i++;
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<fields[i].length;){
+j++;
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(done&&(field==DateUtils.SEMI_MONTH)){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(done&&(round&&roundUp)){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
-if(!offsetSet){
+if(done&&(!offsetSet)){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum((int)(fields[i][0]));
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum((int)(fields[i][0]));
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get((int)(fields[i][0]))-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get((int)(fields[i][0]))-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+if(date==null){
+return ;
+}
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.set(Calendar.SECOND,0);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5273/pattern-ver1-serial/app.src.main.java.com.techlung.moodtracker.notification.NotificationManager.java-getNextNotificationTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+val.set(Calendar.SECOND,0);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5273/pattern-ver1-serial/app.src.main.java.com.techlung.moodtracker.notification.NotificationManager.java-getNextNotificationTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+val.set(Calendar.SECOND,0);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5273/pattern-ver1-serial/app.src.main.java.com.techlung.moodtracker.notification.NotificationManager.java-getNextNotificationTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+val.set(Calendar.SECOND,0);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5273/pattern-ver1-serial/app.src.main.java.com.techlung.moodtracker.notification.NotificationManager.java-getNextNotificationTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+int Calendar=5;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+int DATE=5;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(Math.round(fields[i][0]),1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][0],Math.round(1));
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(Math.round(fields[i][0]),val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(val.equals(InputStream.class)){
+return ;
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(val.equals(InputStream.class)){
+return ;
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(val.equals(InputStream.class)){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
+if(val.equals(InputStream.class)){
+return ;
+}
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+if(val.equals(InputStream.class)){
+return ;
+}
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(val.equals(InputStream.class)){
+return ;
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(round){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(Double.isNaN(field)){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(Double.isNaN(field)){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(Double.isNaN(field)){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(Double.isNaN(offset)){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+}
+if(offset<=0){
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
+}
+if(offset<=0){
+return ;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(offset<=0){
+return ;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+if(val!=null){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+}
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/759/pattern-ver1-serial/src.com.herasymc.cmput301counter.CounterList.java-reset.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
-time=time-(seconds*1000L);
+time=time-seconds;
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
+time=time-minutes;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>(max/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
-if(fields[i][0]==Calendar.HOUR_OF_DAY){
+if(offset==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH&&done){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/5215/pattern-ver1-serial/src.usask.hci.fastdraw.DrawView.java-changeSelection.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Math.abs(Calendar.YEAR))>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
-int millisecs=val.get(Calendar.MILLISECOND);
+int millisecs=val.get(Math.abs(Calendar.MILLISECOND));
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
+int seconds=val.get(Math.abs(Calendar.SECOND));
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
+int minutes=val.get(Math.abs(Calendar.MINUTE));
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
-for(int i=0;i<fields.length;i++){
+for(int i=0;i<fields.length;Math.abs(i++)){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(Math.abs(fields[i][0]));
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum(Math.abs(fields[i][0]));
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(Math.abs(fields[i][0]))-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(Math.abs(fields[i][0]))-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
+for(int j=0;j<fields[i].length;Math.abs(j++)){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
+if(time==0){
+return ;
+}
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+if(time==0){
+return ;
+}
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
+if(time==0){
+return ;
+}
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+}
+if(time==0){
+return ;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+}
 }
+if(time==0){
+return ;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+}
+if(offset==0){
+return ;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+}
 }
+if(time==0){
+return ;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(offset==0){
+return ;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+int indexSelection=0;
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+int indexSelection=0;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+int indexSelection=0;
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+int indexSelection=0;
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+int indexSelection=0;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+int indexSelection=0;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+int indexSelection=0;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][0],Math.max(fields[i][0],1));
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(Math.max(fields[i][0],1),1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(Math.max(fields[i][0],val.get(fields[i][0])-offset),val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i-1][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][0-1],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i-1][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[i-1][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
+int max=val.getActualMaximum(fields[i-1][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i-1][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i-1][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i-1][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j-1]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.util.Arrays;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
+int min=val.getActualMinimum(fields[i][0-1]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
+done=true;
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+done=true;
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+done=true;
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
+done=true;
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
+done=true;
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+done=true;
 time=time-millisecs;
 if(field==Calendar.SECOND){
-done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time==false){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
-done=true;
 }
+done=true;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
-done=true;
 }
+done=true;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+date.setTime(time);
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+val.setTime(date);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+date.setTime(time);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
+date.setTime(time);
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
+date.setTime(time);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH||field==Long.MIN_VALUE){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND||field==Long.MIN_VALUE){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND||field==Long.MIN_VALUE){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0||offset==Long.MIN_VALUE){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time||date.getTime()==Long.MIN_VALUE){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
+if(field==12){
+return ;
+}else {
 if(field==Calendar.MILLISECOND){
 return ;
+}
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+int offset=0;
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
-int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+boolean offsetSet=false;
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
-boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
-offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+offsetSet=true;
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
-offsetSet=true;
 }
 break;
 }
+offsetSet=true;
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
 done=true;
+if(field==Calendar.SECOND){
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
 done=true;
+if(field==Calendar.MINUTE){
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+assert (val!=null);
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+assert (val!=null);
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+assert (val!=null);
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+assert (val!=null);
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+assert (val!=null);
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+assert (val!=null);
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+assert (val!=null);
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+assert (val!=null);
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
+assert (val!=null);
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time==true){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+if(val!=null){
+if(val.get(Calendar.YEAR)>280000000){
+throw new ArithmeticException("Calendar value too large for accurate calculations");
+}
+if(field==Calendar.MILLISECOND){
+return ;
+}
+Date date=val.getTime();
+long time=date.getTime();
+boolean done=false;
+int millisecs=val.get(Calendar.MILLISECOND);
+if(!round||millisecs<500){
+time=time-millisecs;
+if(field==Calendar.SECOND){
+done=true;
+}
+}
+int seconds=val.get(Calendar.SECOND);
+if(!done&&(!round||seconds<30)){
+time=time-(seconds*1000L);
+if(field==Calendar.MINUTE){
+done=true;
+}
+}
+int minutes=val.get(Calendar.MINUTE);
+if(!done&&(!round||minutes<30)){
+time=time-(minutes*60000L);
+}
+if(date.getTime()!=time){
+date.setTime(time);
+val.setTime(date);
+}
+boolean roundUp=false;
+for(int i=0;i<fields.length;i++){
+for(int j=0;j<fields[i].length;j++){
+if(fields[i][j]==field){
+if(round&&roundUp){
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
+}
+return ;
+}
+}
+int offset=0;
+boolean offsetSet=false;
+switch (field){
+case DateUtils.SEMI_MONTH :
+
+if(fields[i][0]==Calendar.DATE){
+offset=val.get(Calendar.DATE)-1;
+if(offset>=15){
+offset-=15;
+}
+roundUp=offset>7;
+offsetSet=true;
+}
+break;
+case Calendar.AM_PM :
+
+if(fields[i][0]==Calendar.HOUR_OF_DAY){
+offset=val.get(Calendar.HOUR_OF_DAY);
+if(offset>=12){
+offset-=12;
+}
+roundUp=offset>6;
+offsetSet=true;
+}
+break;
+}
+if(!offsetSet){
+int min=val.getActualMinimum(fields[i][0]);
+int max=val.getActualMaximum(fields[i][0]);
+offset=val.get(fields[i][0])-min;
+roundUp=offset>((max-min)/2);
+}
+if(offset!=0){
+val.set(fields[i][0],val.get(fields[i][0])-offset);
+}
+}
+throw new IllegalArgumentException("The field "+field+" is not supported");
+}
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(val!=null){
+date.setTime(time);
+val.setTime(date);
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(date!=null){
+date.setTime(time);
+val.setTime(date);
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+date.setTime(time);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
+if(!done){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
+if(!roundUp){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+if(!offsetSet){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>1;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH||"查看红包".equals(field)){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND||"查看红包".equals(field)){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND||"查看红包".equals(field)){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000||"查看红包".equals(val.get(Calendar.YEAR))){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0||"查看红包".equals(offset)){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(round&&roundUp||"查看红包".equals(round)){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH||field==3){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000||val.get(Calendar.YEAR)==3){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND||field==3){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND||field==3){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==field||fields[i][j]==3){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time||date.getTime()==3){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0||offset==3){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>3;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
+val.add(Calendar.DATE,15);
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
+val.add(Calendar.MONTH,1);
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
+val.add(Calendar.MONTH,1);
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+val.add(Calendar.DATE,15);
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>(max-min)/2*100;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+val.add(Calendar.DATE,15);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+val.add(Calendar.MONTH,1);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+val.add(Calendar.MONTH,1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
+val.add(Calendar.DATE,15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val!=null&&val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date!=null&&date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+val.add(Calendar.DATE,15);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+val.add(Calendar.DATE,15);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+val.add(Calendar.DATE,15);
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:26:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+val.add(Calendar.DATE,15);
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
+val.add(Calendar.DATE,15);
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
+val.add(Calendar.DATE,15);
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.add(Calendar.DATE,15);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.add(Calendar.MONTH,1);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field<0||field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field<0||field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)<0||val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field<0||field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset<0||offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]<0||fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()<0||date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+val.add(Calendar.MONTH,1);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
+val.add(Calendar.MONTH,1);
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+val.add(Calendar.MONTH,1);
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(true){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(true){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000==false){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+val.add(Calendar.DATE,15);
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+val.add(Calendar.DATE,15);
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+val.add(Calendar.DATE,15);
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+val.add(Calendar.MONTH,1);
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+val.add(Calendar.MONTH,1);
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
+time=field;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000||val.get(Calendar.YEAR)==Long.MIN_VALUE){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==field||fields[i][j]==Long.MIN_VALUE){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
+val.add(Calendar.DATE,15);
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
+val.add(Calendar.MONTH,1);
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+val.add(Calendar.DATE,15);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/2)/2;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+val.add(Calendar.DATE,15);
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH||field==0){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND||field==0){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000||val.get(Calendar.YEAR)==0){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND||field==0){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0||offset==0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time||date.getTime()==0){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>(max-min)/2*5;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+val.add(Calendar.MONTH,1);
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+val.add(Calendar.DATE,15);
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
 }
+val.add(Calendar.MONTH,1);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.add(Calendar.DATE,15);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+}
+if(val.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+if(val.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
 }
+return ;
 }
+if(val.getClass().getSimpleName().startsWith("SystemException")){
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
+if(val.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
+if(val.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH||field>9){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND||field>9){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0||offset>9){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND||field>9){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000||val.get(Calendar.YEAR)>9){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==field||fields[i][j]>9){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+field+" is not supported"+" -u "+date);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+field+" is not supported"+" -u "+time);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+field+" is not supported"+" -u "+done);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+field+" is not supported"+" -u "+millisecs);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+field+" is not supported"+" -u "+val);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException("The field "+field+" is not supported"+" -u "+seconds);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+val.add(Calendar.MONTH,1);
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+val.add(Calendar.DATE,15);
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+val.add(Calendar.MONTH,1);
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+val.add(Calendar.DATE,15);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+val.add(Calendar.MONTH,1);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+val.add(Calendar.DATE,15);
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+val.add(Calendar.DATE,15);
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+val.add(Calendar.MONTH,1);
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+val.add(Calendar.DATE,15);
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
+val.add(Calendar.DATE,15);
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+val.add(Calendar.MONTH,1);
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
+val.add(Calendar.MONTH,1);
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH&&field<4000000){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000&&val.get(Calendar.YEAR)<4000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND&&field<4000000){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time&&date.getTime()<4000000){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0&&offset<4000000){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND&&field<4000000){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==field&&fields[i][j]<4000000){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(Double.isNaN(val.get(Calendar.YEAR))){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000==true){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(field==DateUtils.SEMI_MONTH&&field!=9999){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(field==Calendar.MILLISECOND&&field!=9999){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000&&val.get(Calendar.YEAR)!=9999){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND&&field!=9999){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
-if(offset!=0){
+if(offset!=0&&offset!=9999){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(date.getTime()!=time&&date.getTime()!=9999){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(fields[i][j]==field&&fields[i][j]!=9999){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(280000000>0&&val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(DateUtils.SEMI_MONTH>0&&field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
+if(time>0&&date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
-if(field==Calendar.MILLISECOND){
+if(Calendar.MILLISECOND>0&&field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
+if(field>0&&fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(Calendar.SECOND>0&&field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
-offset=val.get(Calendar.DATE)-1;
+offset=field;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+assert (field>=0):"Receive a negative tratment";
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+assert (field>=0):"Receive a negative tratment";
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+assert (field>=0):"Receive a negative tratment";
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+assert (field>=0):"Receive a negative tratment";
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+assert (field>=0):"Receive a negative tratment";
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+assert (field>=0):"Receive a negative tratment";
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+assert (field>=0):"Receive a negative tratment";
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<500||"查看红包".equals(!round)){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+if(val==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round||millisecs<500||millisecs=='%'){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+if(field>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,-15);
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
+val.add(Calendar.DATE,-15);
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+val.add(Calendar.DATE,-15);
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+val.add(Calendar.DATE,-15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+val.add(Calendar.DATE,-15);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.add(Calendar.DATE,-15);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
-offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
+offset=val.get(Calendar.HOUR_OF_DAY);
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
-time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
+time=time-millisecs;
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+val.add(Calendar.DATE,-15);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
-time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+time=time-millisecs;
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
-time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+time=time-millisecs;
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
+}
+if(offset<0){
+offset=0;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+if(time<0){
+time=0;
+}
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
+if(time<0){
+time=0;
+}
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
+if(time<0){
+time=0;
+}
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+}
+if(time<0){
+time=0;
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+}
 }
+if(time<0){
+time=0;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(field<0){
+return ;
+}
+if(field>=time){
+return ;
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(field<0){
+return ;
+}
+if(field>=time){
+return ;
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(time<0){
+return ;
+}
+if(time>=field){
+return ;
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(time<0){
+return ;
+}
+if(time>=field){
+return ;
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(field<0){
+return ;
+}
+if(field>=millisecs){
+return ;
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(millisecs<0){
+return ;
+}
+if(millisecs>=field){
+return ;
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(field<0){
+return ;
+}
+if(field>=seconds){
+return ;
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(done!=true){
 time=time-millisecs;
+}
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(done!=true){
 time=time-(seconds*1000L);
+}
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(true){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+val.add(Calendar.DATE,-15);
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+val.add(Calendar.DATE,-15);
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(min>max){
+min=max;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(max>min){
+max=min;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(min>offset){
+min=offset;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(max>offset){
+max=offset;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(offset>min){
+offset=min;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+if(offset>max){
+offset=max;
+}
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
+val.add(Calendar.DATE,-15);
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+val.add(Calendar.DATE,-15);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
+if(field==12){
+return ;
+}else {
 if(field==Calendar.SECOND){
 done=true;
+}
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
-roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+roundUp=offset>7;
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
-roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+roundUp=offset>6;
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+val.add(Calendar.DATE,-15);
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
-val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.add(Calendar.DATE,-15);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+val.add(Calendar.DATE,-15);
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(date==null){
+return ;
+}
+if(val==null){
+return ;
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
+if(date==null){
+return ;
+}
+if(val==null){
+return ;
+}
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+val.add(Calendar.DATE,-15);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+val.add(Calendar.DATE,-15);
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+val.add(Calendar.DATE,-15);
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(done&&(!round||millisecs<500)){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
+val.add(Calendar.DATE,-15);
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
+roundUp=offset>7;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
+roundUp=offset>6;
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000-1){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
-roundUp=offset>7;
+roundUp=offset>7-1;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000-1){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
-roundUp=offset>6;
+roundUp=offset>6-1;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
+offset=val.get(Calendar.HOUR_OF_DAY);
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/2177/pattern-ver1-serial/app.src.main.java.com.kshitij.android.clickme.ui.PhotoFeedActivity.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
+if(round){
+if(field==DateUtils.SEMI_MONTH&&roundUp){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
-val.add(Calendar.DATE,-15);
+val.add(Calendar.DATE,-15-1);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0]-1,val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
+val.add(fields[i][0]-1,1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
-val.add(Calendar.DATE,-15);
+val.add(Calendar.DATE-1,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=1;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=-1;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=0;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+val.add(fields[i][0],1);
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+val.add(fields[i][0],1);
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],30-(val.get(fields[i][0])-offset));
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+val.add(fields[i][0],1);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+val.add(fields[i][0],1);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
+val.add(fields[i][0],1);
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=2;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=3;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+val.add(fields[i][0],1);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
+val.add(fields[i][0],1);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
+val.add(fields[i][0],1);
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
+val.add(fields[i][0],1);
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
+val.add(fields[i][0],1);
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
+val.add(fields[i][0],1);
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
+val.add(fields[i][0],1);
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+val.add(fields[i][0],1);
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+val.add(fields[i][0],1);
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+val.add(fields[i][0],1);
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+val.add(fields[i][0],1);
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+val.add(fields[i][0],1);
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+val.add(fields[i][0],1);
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+val.add(fields[i][0],1);
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
+val.add(fields[i][0],1);
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=(val.get(fields[i][0])-min+min)%min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*millisecs;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*field;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*seconds;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*minutes;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=600;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SniperAssassinate.java-SniperAssassinate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
+val.add(fields[i][0],1);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+if(val.get(Calendar.YEAR)==12){
+return ;
+}else {
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
+}
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=10;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0]);
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],val.get(fields[i][0])-offset-22);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+val.add(fields[i][0],1);
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
+val.add(fields[i][0],1);
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=100;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],Math.round(val.get(fields[i][0])-offset));
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
+val.add(fields[i][0],1);
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
+val.add(fields[i][0],1);
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+val.add(fields[i][0],1);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=4;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=false;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2195/pattern-ver1-serial/src.main.java.ian.hu.webapp.session.FileSessionRepository.java-setStorageDirectory.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=700;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkPounce.java-SlarkPounce.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=field;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=millisecs;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
+val.add(fields[i][0],1);
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
+val.add(fields[i][0],1);
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
-val.set(fields[i][0],val.get(fields[i][0])-offset);
+val.set(fields[i][0],Math.max(fields[i][0],val.get(fields[i][0])-offset));
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
-offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
+offset=val.get(Calendar.DATE)-1;
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+time=time-(minutes*60000L);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+time=time-(minutes*60000L);
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
+time=time-(minutes*60000L);
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+time=time-(minutes*60000L);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
+time=time-(minutes*60000L);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+int min=val.getActualMinimum(fields[i][0]);
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
-int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+int max=val.getActualMaximum(fields[i][0]);
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+ final String dropStatement="The field "+field+" is not supported";
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(dropStatement);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:36:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
-if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
+if(!offsetSet){
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
+int max=val.getActualMaximum(fields[i][0]);
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
-int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
+String loc="The field "+field+" is not supported";
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
-throw new IllegalArgumentException("The field "+field+" is not supported");
+throw new IllegalArgumentException(loc);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
-if(val.get(Calendar.YEAR)>280000000){
+if(val.get(Calendar.YEAR)>280000000-1){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/2)-1;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
-roundUp=offset>7;
+roundUp=offset>7-1;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/2)-1;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
-roundUp=offset>6;
+roundUp=offset>6-1;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
-roundUp=offset>((max-min)/2);
+roundUp=offset>((max-min)/2)-1;
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
+offset=val.get(Calendar.DATE)-1;
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/2177/pattern-ver1-serial/app.src.main.java.com.kshitij.android.clickme.ui.PhotoFeedActivity.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if(round){
 if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
+if(val.get(Calendar.DATE)==1&&roundUp){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done&&(!round||minutes<30)||"查看红包".equals(!done)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds<30)||"查看红包".equals(!done)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if((!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if((!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(true){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done&&(!round||seconds<30)&&done){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/573/pattern-ver1-serial/src.CollisionDetection.java-detection.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(!done){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/573/pattern-ver1-serial/src.CollisionDetection.java-detection.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(done&&(!done&&(!round||seconds<30))){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if(done&&(!done&&(!round||minutes<30))){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if(!round){
 time=time-millisecs;
-if(field==Calendar.SECOND){
+if(field==Calendar.SECOND&&millisecs<500){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
+if(val==null||date==null){
+throw new NullPointerException();
+}
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+}
+if(val==null||date==null){
+throw new NullPointerException();
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+if(field==3){
+System.out.println("debug");
+}
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+}
+if(field==3){
+System.out.println("debug");
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:37:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
+if(field==3){
+System.out.println("debug");
+}
 val.add(fields[i][0],1);
+if(field==3){
+System.out.println("debug");
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(field==3){
+System.out.println("debug");
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+}
+if(field==3){
+System.out.println("debug");
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(field==3){
+System.out.println("debug");
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+}
+if(field==3){
+System.out.println("debug");
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(field==3){
+System.out.println("debug");
+}
 date.setTime(time);
 val.setTime(date);
+if(field==3){
+System.out.println("debug");
+}
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
+if(field==3){
+System.out.println("debug");
+}
 done=true;
+if(field==3){
+System.out.println("debug");
+}
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
+if(field==3){
+System.out.println("debug");
+}
 time=time-(minutes*60000L);
+if(field==3){
+System.out.println("debug");
+}
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+if(field==3){
+System.out.println("debug");
+}
 val.set(fields[i][0],val.get(fields[i][0])-offset);
+if(field==3){
+System.out.println("debug");
+}
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if((!done)&&((!round||seconds<30))){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if((round)&&(roundUp)){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if((!done)&&((!round||minutes<30))){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
+if((round)&&(roundUp)){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
-offset=val.get(Calendar.HOUR_OF_DAY);
+offset=val.get(Calendar.HOUR_OF_DAY)*2;
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*2;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
-offset-=15;
+offset-=15*2;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*2;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
-offset-=12;
+offset-=12*2;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*2;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
+roundUp=offset>((max-min)/2);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
+roundUp=offset>((max-min)/2);
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+}
+if(date.getTime()!=time){
+date.setTime(time);
+val.setTime(date);
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
-}
-if(date.getTime()!=time){
-date.setTime(time);
-val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
-}
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+}
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+}
+if(date.getTime()!=time){
+date.setTime(time);
+val.setTime(date);
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
-}
-if(date.getTime()!=time){
-date.setTime(time);
-val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
+if(date.getTime()!=time){
+date.setTime(time);
+val.setTime(date);
+}
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
-}
-if(date.getTime()!=time){
-date.setTime(time);
-val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
-}
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
+}
+time=time-(minutes*60000L);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
+if(date.getTime()!=time){
+date.setTime(time);
+val.setTime(date);
+}
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
-}
-if(date.getTime()!=time){
-date.setTime(time);
-val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
+}else {
+done=true;
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V36/2665/pattern-ver1-serial/tajo-client.src.main.java.org.apache.tajo.client.TajoDump.java-main.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
-time=time-millisecs;
-if(field==Calendar.SECOND){
 done=true;
-}
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2716/pattern-ver1-serial/reports.src.main.java.org.sola.clients.reports.ReportManager.java-getCofO.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+if(offset!=val.get(fields[i][0])-min){
 roundUp=offset>((max-min)/2);
+}
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
-offset=val.get(Calendar.DATE)-1;
+offset=val.get(Calendar.DATE)-1*2;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
-offset=val.get(fields[i][0])-min;
+offset=val.get(fields[i][0])-min*2;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if(!done){
 time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
+if(field==Calendar.MINUTE&&(!round||seconds<30)){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
+val.set(fields[i][0],val.get(fields[i][0])-offset);
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if((!round)||(millisecs<500)){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if((!done)&&((!round||seconds<30))){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
+if((!round)||(millisecs<500)){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if((!done)&&((!round||minutes<30))){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
-time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
+}else {
+done=true;
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V36/2665/pattern-ver1-serial/tajo-client.src.main.java.org.apache.tajo.client.TajoDump.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
-time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
 done=true;
-}
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2716/pattern-ver1-serial/reports.src.main.java.org.sola.clients.reports.ReportManager.java-getCofO.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
+val.set(fields[i][0],val.get(fields[i][0])-offset);
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
-time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 8, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
+if((!done)&&((!round||seconds<30))){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
+if((!done)&&((!round||minutes<30))){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
-}
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
+if(!done&&(!round||minutes<30)){
+time=time-(minutes*60000L);
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
+if(date.getTime()!=time){
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
-time=time-millisecs;
-if(field==Calendar.SECOND){
-done=true;
-}
-}
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
+if(!round||millisecs<500){
+time=time-millisecs;
+if(field==Calendar.SECOND){
+done=true;
+}
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
-time=time-millisecs;
-if(field==Calendar.SECOND){
-done=true;
-}
-}
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
+if(!round||millisecs<500){
+time=time-millisecs;
+if(field==Calendar.SECOND){
+done=true;
+}
+}
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
+int seconds=val.get(Calendar.SECOND);
+if(!done&&(!round||seconds<30)){
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
-int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
-if(!round||millisecs<500){
-time=time-millisecs;
-if(field==Calendar.SECOND){
-done=true;
-}
-}
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
+if(!round||millisecs<500){
+time=time-millisecs;
+if(field==Calendar.SECOND){
+done=true;
+}
+}
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==12){
+return ;
+}else {
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
+}
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+}else {
+val.add(Calendar.DATE,15);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}else {
+val.add(Calendar.DATE,15);
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
-}
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+if(fields[i][j]==field){
+if(round&&roundUp){
+if(field==DateUtils.SEMI_MONTH){
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+if(round&&roundUp){
+if(field==DateUtils.SEMI_MONTH){
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
+if(field==DateUtils.SEMI_MONTH){
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
-if(!done&&(!round||seconds<30)){
-time=time-(seconds*1000L);
-if(field==Calendar.MINUTE){
-done=true;
-}
-}
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
+if(!done&&(!round||seconds<30)){
+time=time-(seconds*1000L);
+if(field==Calendar.MINUTE){
+done=true;
+}
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 1, DEL : 22
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
+int minutes=val.get(Calendar.MINUTE);
+if(!done&&(!round||minutes<30)){
+time=time-(minutes*60000L);
+}
+if(date.getTime()!=time){
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
-}
 }
-int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
-time=time-(minutes*60000L);
 }
-if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 1, DEL : 22
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
+int minutes=val.get(Calendar.MINUTE);
+if(!done&&(!round||minutes<30)){
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
-int minutes=val.get(Calendar.MINUTE);
-if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 1, DEL : 22
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
 val.add(fields[i][0],1);
+}else {
+val.add(Calendar.DATE,15);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
+val.add(fields[i][0],1);
 }else {
 val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
+val.add(fields[i][0],1);
 }else {
-val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4389/pattern-ver1-serial/app.src.main.java.com.gamble.unopp.GameScreenActivity.java-playCard.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 0, INS : 0, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+}else {
+val.add(fields[i][0],1);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}else {
+val.add(fields[i][0],1);
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if(field==12){
+return ;
+}else {
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
+}else {
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
 val.add(fields[i][0],1);
-}
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6693/pattern-ver1-serial/app.src.main.java.mindpop.learnpop.WebItem.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
-if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+if(fields[i][j]==field){
+if(round&&roundUp){
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+if(round&&roundUp){
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
-for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
-if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
+for(int j=0;j<fields[i].length;j++){
+if(fields[i][j]==field){
+if(round&&roundUp){
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
+}
+}
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
 }
+}else {
+val.add(fields[i][0],1);
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 0, INS : 1, DEL : 27
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
-}
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 0, DEL : 30
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}else {
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
 }
-return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
 val.add(fields[i][0],1);
-}
-}
-return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
-}
-return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
-}
-return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
-if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
-}
 }
-return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
+if(round&&roundUp){
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
+}
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 0, INS : 1, DEL : 30
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
+}
+if(round&&roundUp){
+if(field==DateUtils.SEMI_MONTH){
+if(val.get(Calendar.DATE)==1){
+val.add(Calendar.DATE,15);
+}else {
+val.add(Calendar.DATE,-15);
+val.add(Calendar.MONTH,1);
+}
+}else {
+val.add(fields[i][0],1);
+}
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 0, INS : 1, DEL : 30
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
-if(fields[i][j]==field){
-if(round&&roundUp){
-if(field==DateUtils.SEMI_MONTH){
-if(val.get(Calendar.DATE)==1){
-val.add(Calendar.DATE,15);
-}else {
-val.add(Calendar.DATE,-15);
-val.add(Calendar.MONTH,1);
-}
-}else {
-val.add(fields[i][0],1);
-}
-}
-return ;
-}
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 0, INS : 0, DEL : 35
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
+if(val!=null){
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
+}
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6317/pattern-ver1-serial/src.storybuilder.graph.model.GraphDatasource.java-getMinigameConnectionsFrom.pattern
MATCHLEVEL : ALL
ALL : 37, UPD : 3, INS : 0, DEL : 34
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
+if(val!=null){
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
+}
 }
 }
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6317/pattern-ver1-serial/src.storybuilder.graph.model.GraphDatasource.java-getMinigameConnectionsFrom.pattern
MATCHLEVEL : ALL
ALL : 37, UPD : 3, INS : 0, DEL : 34
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[612,744]
------------Candidate---------------
 private static void modify(Calendar val,int field,boolean round){
 if(val.get(Calendar.YEAR)>280000000){
 throw new ArithmeticException("Calendar value too large for accurate calculations");
 }
 if(field==Calendar.MILLISECOND){
 return ;
 }
 Date date=val.getTime();
 long time=date.getTime();
 boolean done=false;
 int millisecs=val.get(Calendar.MILLISECOND);
 if(!round||millisecs<500){
 time=time-millisecs;
 if(field==Calendar.SECOND){
 done=true;
 }
 }
 int seconds=val.get(Calendar.SECOND);
 if(!done&&(!round||seconds<30)){
 time=time-(seconds*1000L);
 if(field==Calendar.MINUTE){
 done=true;
 }
 }
+if(val!=null){
 int minutes=val.get(Calendar.MINUTE);
 if(!done&&(!round||minutes<30)){
 time=time-(minutes*60000L);
+}
 }
 if(date.getTime()!=time){
 date.setTime(time);
 val.setTime(date);
 }
 boolean roundUp=false;
 for(int i=0;i<fields.length;i++){
 for(int j=0;j<fields[i].length;j++){
 if(fields[i][j]==field){
 if(round&&roundUp){
 if(field==DateUtils.SEMI_MONTH){
 if(val.get(Calendar.DATE)==1){
 val.add(Calendar.DATE,15);
 }else {
 val.add(Calendar.DATE,-15);
 val.add(Calendar.MONTH,1);
 }
 }else {
 val.add(fields[i][0],1);
 }
 }
 return ;
 }
 }
 int offset=0;
 boolean offsetSet=false;
 switch (field){
 case DateUtils.SEMI_MONTH :
 
 if(fields[i][0]==Calendar.DATE){
 offset=val.get(Calendar.DATE)-1;
 if(offset>=15){
 offset-=15;
 }
 roundUp=offset>7;
 offsetSet=true;
 }
 break;
 case Calendar.AM_PM :
 
 if(fields[i][0]==Calendar.HOUR_OF_DAY){
 offset=val.get(Calendar.HOUR_OF_DAY);
 if(offset>=12){
 offset-=12;
 }
 roundUp=offset>6;
 offsetSet=true;
 }
 break;
 }
 if(!offsetSet){
 int min=val.getActualMinimum(fields[i][0]);
 int max=val.getActualMaximum(fields[i][0]);
 offset=val.get(fields[i][0])-min;
 roundUp=offset>((max-min)/2);
 }
 if(offset!=0){
 val.set(fields[i][0],val.get(fields[i][0])-offset);
 }
 }
 throw new IllegalArgumentException("The field "+field+" is not supported");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6317/pattern-ver1-serial/src.storybuilder.graph.model.GraphDatasource.java-getMinigameConnectionsFrom.pattern
MATCHLEVEL : ALL
ALL : 37, UPD : 3, INS : 0, DEL : 34
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:42:18 CDT
--------------- END -----------------
Location : org.apache.commons.lang.time.DateUtils.round:[437, 440, 441, 442, 443]#0.5773502691896258
Compute Candidate : 2019.09.07 AD at 23:42:36 CDT - 2019.09.07 AD at 23:50:17 CDT , PNumber : 11328, CandNumber : 92 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.util.Locale;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
-Calendar gval=Calendar.getInstance();
+Calendar gval=Calendar.getInstance(Locale.ENGLISH);
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/3320/pattern-ver1-serial/src.main.java.com.sk89q.craftbook.circuits.ic.ICMechanicFactory.java-hasSafePermissions.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.nio.charset.StandardCharsets;
+
+import java.util.Locale;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
-Calendar gval=Calendar.getInstance();
+Calendar gval=Calendar.getInstance(Locale.UK);
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V15/4612/pattern-ver1-serial/plugins.org.csstudio.saverestore.git.src.org.csstudio.saverestore.git.GitManager.java-findSnapshotsByTag.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
-modify(gval,field,true);
+modify(gval,field,false);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
-Calendar gval=Calendar.getInstance();
+ Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
-if(date==null){
+if(date!=null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
-Calendar gval=Calendar.getInstance();
+Calendar gval=Calendar.getInstance().getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
-gval.setTime(date);
+gval.getInstance().setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval.getInstance().getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.service.PaymentService.java-currencyRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
+field++;
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+field++;
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+field--;
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
+field--;
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return (Date)gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+gval.clear();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6396/pattern-ver1-serial/core.src.com.FOS.Pixel.screens.GameScreen.java-checkCollectedOrbs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+synchronized(gval){
 gval.setTime(date);
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return date;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+field++;
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return (Date)(gval.getTime());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval!=null){
 gval.setTime(date);
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(date!=null){
 gval.setTime(date);
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
-if(date==null){
+if(date.equals(null)){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+date=date;
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+field=field;
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+gval=gval;
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
-if(date==null){
+if(true){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
+int a=0;
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+int a=0;
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.util.Arrays;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+gval.set(Calendar.SECOND,0);
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2311/pattern-ver1-serial/MyClock.src.com.gcl.myclock.tools.ClockUtils.java-getCalendarForHourAndMinus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
+String OUTSTRING="";
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+String OUTSTRING="";
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+int indexSelection=0;
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return new Date(gval.getTime().getTime());
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4476/pattern-ver1-serial/osgp-domain-core.src.main.java.com.alliander.osgp.domain.core.valueobjects.smartmetering.ActualMeterReads.java-getLogTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
+int a=1;
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+int a=1;
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
+boolean b=true;
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+boolean b=true;
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+if(date==null){
+return null;
+}
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval==null){
+return null;
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+if(gval==null){
+return null;
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(date==null){
+return null;
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+if(gval==null){
+return null;
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+gval.add(Calendar.HOUR_OF_DAY,-6);
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/1290/pattern-ver1-serial/DrinkingApp.src.cornell.trickleapp.DatabaseHandler.java-addValueYesterday.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
+}
+if("&null".equals(date)){
+return null;
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if("&null".equals(gval)){
+return null;
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
+}
+if("&null".equals(field)){
+return null;
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(!date.equals("")){
 gval.setTime(date);
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+if(field<0){
+return null;
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval.equals("-1")){
+return null;
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
-gval.setTime(date);
+try{
 modify(gval,field,true);
+}finally{
+gval.setTime(date);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+assert (date!=null);
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+assert (gval!=null);
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval.equals(InputStream.class)){
+return date;
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+if(date!=null){
+if(date==null){
+throw new IllegalArgumentException("The date must not be null");
+}
+Calendar gval=Calendar.getInstance();
+gval.setTime(date);
+modify(gval,field,true);
+return gval.getTime();
+}
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+assert (gval!=Calendar.getInstance());
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
+assert (date!=null);
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
-gval.setTime(date);
+gval.getInstance().setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval.getInstance().getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4879/pattern-ver1-serial/app.src.main.java.org.votingsystem.activity.RepresentativeDelegationActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+if(gval.equals(null)){
+return null;
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+if(gval.equals(null)){
+return null;
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval.equals(null)){
+return null;
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+if(gval.equals("655")){
+System.out.println();
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+if(gval.equals("655")){
+System.out.println();
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval.equals("655")){
+System.out.println();
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
-if(date==null){
+if(date==null||"查看红包".equals(date)){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval.getTime()!=null?gval.getTime():new Date();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+try{
 gval.setTime(date);
+}finally{
 modify(gval,field,true);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval==null?null:gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
-if(date==null){
+if(date==null||date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval.getTime()==null?new Date():gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+assert (field>=0):"Receive a negative tratment";
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+if(gval!=null){
 return gval.getTime();
+}else {
+return null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval!=null?gval.getTime():null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+assert (date!=null):"Appointments day is not allowed to be null!";
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+assert (gval!=null):"Appointments day is not allowed to be null!";
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static Date round(Date date,int field){
+assert (field!=0):"Receive a size tratment";
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
+if(gval==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+if(field>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(date==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
-gval.setTime(date);
+if(date!=null){
 modify(gval,field,true);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
-gval.setTime(date);
+if(gval!=null){
 modify(gval,field,true);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval!=null){
 gval.setTime(date);
+}
+if(gval!=null){
 modify(gval,field,true);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4107/pattern-ver1-serial/src.baseline.hvac.system7.HVACSystem7.java-checkSupplySideSystem.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
-if(date==null){
+if(date==null&&!date.equals("")){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
 modify(gval,field,true);
-return gval.getTime();
+return gval.getTime()==null?null:new Date(gval.getTime().getTime());
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5201/pattern-ver1-serial/src.main.java.net.github.rtc.app.utils.datatable.search.CourseSearchFilter.java-getStartDate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(date!=null){
 gval.setTime(date);
-modify(gval,field,true);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval!=null){
 gval.setTime(date);
-modify(gval,field,true);
+}
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
+if(gval==null||date==null){
+throw new NullPointerException();
+}
 gval.setTime(date);
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+if(field==3){
+System.out.println("debug");
+}
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+if(field==3){
+System.out.println("debug");
+}
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java[408,444]
------------Candidate---------------
 public static Date round(Date date,int field){
+long startTime=System.currentTimeMillis();
 if(date==null){
 throw new IllegalArgumentException("The date must not be null");
 }
 Calendar gval=Calendar.getInstance();
 gval.setTime(date);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 modify(gval,field,true);
 return gval.getTime();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.time.DateUtilsTest::testRoundLang346]
---------START : 2019.09.07 AD at 21:05:51 CDT
---------TIME : 2019.09.07 AD at 23:53:59 CDT
--------------- END -----------------
Finish : lang-53 > patch : 0 | Start : Sat Sep 07 21:05:51 CDT 2019 | End : 2019.09.07 AD at 23:53:59 CDT
