Repair : math_11
Current failed test : org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution | 2019.09.04 AD at 21:05:39 CDT
Location : org.apache.commons.math3.util.FastMath.pow:[1614, 1613]#1.0
Compute Candidate : 2019.09.04 AD at 21:08:27 CDT - 2019.09.04 AD at 22:41:07 CDT , PNumber : 11426, CandNumber : 287 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
-if(e<0){
+if(d<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return 1;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
-if(e<0){
+if(e<=0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
- final double d1High=cd-(cd-d);
+ final double d1High=cd-(e-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
- final double d1High=cd-(cd-d);
+ final double d1High=cd-(d-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e<=0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
-d2p=d2pHigh+d2pLow;
+d2p=d2pHigh+d;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
-d2p=d2pHigh+d2pLow;
+d2p=d2pHigh+e;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(d==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return Integer.MIN_VALUE;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e>=0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e!=0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if(e<0){
+e=-e;
+d=1.0/d;
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
-resultHigh=tmpHigh;
+resultHigh=d;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
-resultHigh=tmpHigh;
+resultHigh=e;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return Integer.MAX_VALUE;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return e;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return d;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e>0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
- final double d1High=cd-(cd-d);
+ final double d1High=cd-(cd-e);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
+while(d!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return 100;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return 0.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2568/pattern-ver1-serial/driver.src.main.java.org.neo4j.driver.v1.internal.value.BooleanValue.java-javaFloat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=1.0/e;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
-if(e<0){
+if(e>0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4131/pattern-ver1-serial/src.net.sourceforge.cruisecontrol.sampleproject.connectfour.PlayingStand.java~-areFourConnected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return -1;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double pow(double d,int e){
-if(e==0){
+if(e==-1){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
+e=e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+resultLow++;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
+resultHigh++;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+d++;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e++;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
+d2p++;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
+d2pHigh++;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
+d++;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
+e++;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
+e++;
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+d2pLow++;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
+resultHigh--;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+resultLow--;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+d--;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e--;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
+d2p--;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
+d2pHigh--;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+d2pLow--;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return (double)(1.0);
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+log(d);
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+log(e);
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+log(d);
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+log(e);
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
+log(e);
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+log(d);
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+log(e);
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+log(splitFactor);
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+log(cd);
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+log(d1High);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e<0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return 1+1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+d=d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+e=e;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e=e;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e+e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e+d==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
+e=e;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(true){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=1.0/d*d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=1.0/d*e;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
-return 1.0;
+return 1.0+0.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+int a=0;
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
+int a=0;
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+int a=0;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+String OUTSTRING="";
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+String OUTSTRING="";
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
+String OUTSTRING="";
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(Double.isNaN(e)){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
-if((e&0x1)!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+int indexSelection=0;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+int indexSelection=0;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
-if((e&0x1)!=0){
+if(d!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
+e=e+-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
+e=e+e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=d+1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
+int a=1;
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+int a=1;
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+int a=1;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
-d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
+d2pLow=d2pLow*d2p+tmpLow+d;
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
-d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
+d2pLow=d2pLow*d2p+tmpLow+e;
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+boolean b=true;
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
+boolean b=true;
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+boolean b=true;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
-return resultHigh+resultLow;
+return resultHigh+resultLow+e;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
-return resultHigh+resultLow;
+return resultHigh+resultLow+d;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0-1){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+if("index".equals(d)){
+return 0;
+}
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+if("index".equals(e)){
+return 0;
+}
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if("index".equals(d)){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if("index".equals(e)){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+if("index".equals(splitFactor)){
+return 0;
+}
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if("index".equals(cd)){
+return 0;
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+if("index".equals(d1High)){
+return 0;
+}
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
+if("index".equals(d1Low)){
+return 0;
+}
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
+if("index".equals(resultHigh)){
+return 0;
+}
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+if("index".equals(resultLow)){
+return 0;
+}
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0d;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
+if(e<0){
+return 0d;
+}
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+if(e<0){
+return 0d;
+}
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if(d<0){
+return 0d;
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if(cd<0){
+return 0d;
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0||e==Long.MIN_VALUE){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
-double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
+double d2p=d;
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/730/pattern-ver1-serial/src.main.java.edu.diary.repository.jdbc.JdbcModuleRepositoryImpl.java-getAll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
+if(e==0){
+return 0d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
+if(d==0){
+return 0d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pHigh==0){
+return 0d;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pLow==0){
+return 0d;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
 }
+if(e==0){
+return 0d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
 }
+if(d==0){
+return 0d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(resultHigh==0){
+return 0d;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(e==0){
+return 0d;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2p==0){
+return 0d;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(resultLow==0){
+return 0d;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
+assert (d2p!=d);
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+assert (splitFactor!=0x8000001);
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
+assert (resultHigh!=1);
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+assert (resultLow!=0);
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
+assert (d2pHigh!=d1High);
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+assert (d2pLow!=d1Low);
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+assert (cd!=splitFactor*d);
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
+assert (d1Low!=d-d1High);
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
+e=-1;
 d=1.0/d;
 }
+e++;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
+e=-1;
 d=1.0/d;
 }
 }
+e++;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(d!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(cd!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(d1High!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(d1Low!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(resultHigh!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(resultLow!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(d2p!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(d2pHigh!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
-if((e&0x1)!=0){
+while(d2pLow!=0){
+if(e!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3761/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.ReadImageTask.java-setView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e==0){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
+}else {
+if(e<0){
+e=-e;
+d=1.0/d;
+}
+}
+ final int splitFactor=0x8000001;
+ final double cd=splitFactor*d;
+ final double d1High=cd-(cd-d);
+ final double d1Low=d-d1High;
+double resultHigh=1;
+double resultLow=0;
+double d2p=d;
+double d2pHigh=d1High;
+double d2pLow=d1Low;
+while(e!=0){
+if((e&0x1)!=0){
+ final double tmpHigh=resultHigh*d2p;
+ final double cRH=splitFactor*resultHigh;
+ final double rHH=cRH-(cRH-resultHigh);
+ final double rHL=resultHigh-rHH;
+ final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
+resultHigh=tmpHigh;
+resultLow=resultLow*d2p+tmpLow;
+}
+ final double tmpHigh=d2pHigh*d2p;
+ final double cD2pH=splitFactor*d2pHigh;
+ final double d2pHH=cD2pH-(cD2pH-d2pHigh);
+ final double d2pHL=d2pHigh-d2pHH;
+ final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
+ final double cTmpH=splitFactor*tmpHigh;
+d2pHigh=cTmpH-(cTmpH-tmpHigh);
+d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
+d2p=d2pHigh+d2pLow;
+e=e>>1;
+}
+return 1.0;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4540/pattern-ver1-serial/core-cube.src.main.java.org.apache.kylin.gridtable.GTScanRangePlanner.java-compare.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0||"查看红包".equals(e)){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0||e==3){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e<0||e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+e=-e;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
 d=1.0/d;
 }
+e=-e;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+e=-e;
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+e=-e;
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
+e=-e;
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
+e=-e;
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
-if(e<0){
 e=-e;
+if(e<0){
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+e=-e;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+e=-e;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e=-e;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
+e=(-e+e)%e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=(1.0/d+d)%d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+e=-e;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+e=-e;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
+e=-e;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
 d=1.0/d;
 }
 }
+e=-e;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+e=-e;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
-e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+e=-e;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0||e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0||e>9){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0&&e<4000000){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pHigh<=0){
+return -1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pLow<=0){
+return -1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0&&e!=9999){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(0>0&&e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+assert (e>=0):"Receive a negative tratment";
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+assert (e>=0):"Receive a negative tratment";
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+assert (d>=0):"Receive a negative tratment";
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
+assert (e>=0):"Receive a negative tratment";
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+assert (e>=0):"Receive a negative tratment";
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+assert (d>=0):"Receive a negative tratment";
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+assert (d>=0):"Receive a negative tratment";
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+assert (splitFactor>=0):"Receive a negative tratment";
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+assert (cd>=0):"Receive a negative tratment";
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+assert (d1High>=0):"Receive a negative tratment";
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:51:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e++;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
+e=-1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
+e=-1;
 }
+e++;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
+d=-1;
 }
+d++;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
+e=-e;
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+assert (e!=0):"Receive a size tratment";
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+assert (e!=0):"Receive a size tratment";
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+assert (d!=0):"Receive a size tratment";
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
+assert (e!=0):"Receive a size tratment";
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
+assert (e!=0):"Receive a size tratment";
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+assert (d!=0):"Receive a size tratment";
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
+assert (d!=0):"Receive a size tratment";
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+assert (splitFactor!=0):"Receive a size tratment";
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+assert (cd!=0):"Receive a size tratment";
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+assert (d1High!=0):"Receive a size tratment";
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==0||e=='"'){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+if(e>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if(d>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if(cd>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+if(resultHigh>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+d=1.0/d;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
 }
+d=1.0/d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+e=e>>1;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+d=1.0/d;
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+e=e>>1;
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+d=1.0/d;
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
+if(e<0){
+e=0;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
+if(d<0){
+d=0;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pHigh<0){
+d2pHigh=0;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
 }
+if(e<0){
+e=0;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(e<0){
+e=0;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pLow<0){
+d2pLow=0;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:53:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
 }
+if(d<0){
+d=0;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(resultHigh<0){
+resultHigh=0;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2p<0){
+d2p=0;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(resultLow<0){
+resultLow=0;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+d=1.0/d;
 if(e<0){
 e=-e;
-d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+d=1.0/d;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+d=1.0/d;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+e=e>>1;
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
+d=1.0/d;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+d=1.0/d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+d=1.0/d;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+e=e>>1;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+d=1.0/d;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+if(d2pHigh<=0){
+d2pHigh=1;
+}
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
+d=1.0/d;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
 }
 }
+d=1.0/d;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+d=1.0/d;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
-d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+d=1.0/d;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+e=e>>1;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
+e=e>>1;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
-e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+e=e>>1;
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
+ final double cRH=splitFactor*resultHigh;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
- final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e=-e;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
+e=-e;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
+e=-e;
 e=-e;
 d=1.0/d;
 }
+e=-e;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e=-e;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
+e=-e;
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+e=e>>1;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
+e=e>>1;
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
+e=e>>1;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2pLow<=0){
+d2pLow=d2pHigh;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2p<=0){
+d2p=d2pHigh;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
+}
+if(d2p<=0){
+d2p=d2pLow;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
-d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+d2p=d2pHigh+d2pLow;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/810/pattern-ver1-serial/src.main.java.org.gooru.nucleus.handlers.courses.processors.repositories.activejdbc.dbhandlers.MoveCollectionToLessonHandler.java-validateRequest.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+d=1.0/d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
+d=1.0/d;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
+d=1.0/d;
 d=1.0/d;
 }
+d=1.0/d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+d=1.0/d;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
+d=1.0/d;
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
+d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+if(e<0){
+return 0;
+}
+if(e>=d){
+return d-1;
+}
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+if(d<0){
+return 0;
+}
+if(d>=e){
+return e-1;
+}
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
+if(e>=d){
+return d-1;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
+if(e>=splitFactor){
+return splitFactor-1;
+}
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+if(e>=cd){
+return cd-1;
+}
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+if(e>=d1High){
+return d1High-1;
+}
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
+if(e>=d1Low){
+return d1Low-1;
+}
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
+if(e>=resultHigh){
+return resultHigh-1;
+}
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
+if(e>=resultLow){
+return resultLow-1;
+}
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+if(e<0){
+return 0;
+}
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
+if(e>=d2p){
+return d2p-1;
+}
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+if(e==3){
+System.out.println("debug");
+}
 if(e<0){
 e=-e;
 d=1.0/d;
+}
+if(e==3){
+System.out.println("debug");
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+if(d==3){
+System.out.println("debug");
+}
 if(e<0){
 e=-e;
 d=1.0/d;
+}
+if(d==3){
+System.out.println("debug");
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+int i=0;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
+while((e!=0)&&i<100){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
+i++;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
+int i=0;
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
-while(e!=0){
+while((e!=0)&&i<100){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
+i++;
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
-if(e<0){
 e=-e;
 d=1.0/d;
-}
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
+d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
+d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
-return 1.0;
-}else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+if(e==0){
+return 1.0;
+}else {
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
+}
+if(e<0){
+e=-e;
+d=1.0/d;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+}
+ final int splitFactor=0x8000001;
+ final double cd=splitFactor*d;
 if(e<0){
 e=-e;
 d=1.0/d;
-}
 }
- final int splitFactor=0x8000001;
- final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
-if(e<0){
-e=-e;
-d=1.0/d;
-}
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
+if(e<0){
+e=-e;
+d=1.0/d;
+}
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
+long startTime=System.currentTimeMillis();
 if(e<0){
 e=-e;
 d=1.0/d;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
+long startTime=System.currentTimeMillis();
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
+if(e<0){
+e=-e;
+d=1.0/d;
+}
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
-return 1.0;
-}else {
-if(e<0){
-e=-e;
-d=1.0/d;
-}
-}
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
+if(e==0){
+return 1.0;
+}else {
+if(e<0){
+e=-e;
+d=1.0/d;
+}
+}
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
-return 1.0;
-}else {
-if(e<0){
-e=-e;
-d=1.0/d;
-}
-}
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
+if(e==0){
+return 1.0;
+}else {
+if(e<0){
+e=-e;
+d=1.0/d;
+}
+}
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+d2pLow=Math.round(d2pLow*100.0)/100.0;
+resultLow=Math.round(resultLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+resultLow=Math.round(resultLow*100.0)/100.0;
+d2pLow=Math.round(d2pLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
+d=Math.round(d*100.0)/100.0;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+resultLow=Math.round(resultLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+resultHigh=Math.round(resultHigh*100.0)/100.0;
+resultLow=Math.round(resultLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+d2p=Math.round(d2p*100.0)/100.0;
+resultLow=Math.round(resultLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+d2pHigh=Math.round(d2pHigh*100.0)/100.0;
+resultLow=Math.round(resultLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
 if(e==0){
 return 1.0;
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
 }
 }
+d=Math.round(d*100.0)/100.0;
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
+d2pLow=Math.round(d2pLow*100.0)/100.0;
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1603,1668]
------------Candidate---------------
 public static double pow(double d,int e){
-if(e==0){
+if(e==','||e==']'||e=='}'){
 return 1.0;
+}else {
+if(e==0){
 }else {
 if(e<0){
 e=-e;
 d=1.0/d;
+}
 }
 }
  final int splitFactor=0x8000001;
  final double cd=splitFactor*d;
  final double d1High=cd-(cd-d);
  final double d1Low=d-d1High;
 double resultHigh=1;
 double resultLow=0;
 double d2p=d;
 double d2pHigh=d1High;
 double d2pLow=d1Low;
 while(e!=0){
 if((e&0x1)!=0){
  final double tmpHigh=resultHigh*d2p;
  final double cRH=splitFactor*resultHigh;
  final double rHH=cRH-(cRH-resultHigh);
  final double rHL=resultHigh-rHH;
  final double tmpLow=rHL*d2pLow-(((tmpHigh-rHH*d2pHigh)-rHL*d2pHigh)-rHH*d2pLow);
 resultHigh=tmpHigh;
 resultLow=resultLow*d2p+tmpLow;
 }
  final double tmpHigh=d2pHigh*d2p;
  final double cD2pH=splitFactor*d2pHigh;
  final double d2pHH=cD2pH-(cD2pH-d2pHigh);
  final double d2pHL=d2pHigh-d2pHH;
  final double tmpLow=d2pHL*d2pLow-(((tmpHigh-d2pHH*d2pHigh)-d2pHL*d2pHigh)-d2pHH*d2pLow);
  final double cTmpH=splitFactor*tmpHigh;
 d2pHigh=cTmpH-(cTmpH-tmpHigh);
 d2pLow=d2pLow*d2p+tmpLow+(tmpHigh-d2pHigh);
 d2p=d2pHigh+d2pLow;
 e=e>>1;
 }
 return resultHigh+resultLow;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/5747/pattern-ver1-serial/java.src.advent.twelve.JsonParser.java-parseJson.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 23, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 22:58:12 CDT
--------------- END -----------------
Location : org.apache.commons.math3.random.RandomDataImpl.RandomDataImpl:[114, 115, 116]#1.0
Compute Candidate : 2019.09.04 AD at 23:00:23 CDT - 2019.09.04 AD at 23:03:49 CDT , PNumber : 11280, CandNumber : 18 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:03:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
-delegate=new RandomDataGenerator();
+delegate=new RandomDataGenerator(null);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
-delegate=new RandomDataGenerator();
+delegate=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
+synchronized(this){
 delegate=new RandomDataGenerator();
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
+int a=0;
 delegate=new RandomDataGenerator();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
+String OUTSTRING="";
 delegate=new RandomDataGenerator();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+int delegate=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
+int a=1;
 delegate=new RandomDataGenerator();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+boolean delegate=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
+boolean b=true;
 delegate=new RandomDataGenerator();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public RandomDataImpl(){
 delegate=new RandomDataGenerator();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java[106,116]
------------Candidate---------------
 public RandomDataImpl(){
+long startTime=System.currentTimeMillis();
 delegate=new RandomDataGenerator();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:06:44 CDT
--------------- END -----------------
Location : org.apache.commons.math3.random.RandomDataGenerator.RandomDataGenerator:[131, 132]#1.0
Compute Candidate : 2019.09.04 AD at 23:08:51 CDT - 2019.09.04 AD at 23:11:55 CDT , PNumber : 11280, CandNumber : 15 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+throw new UnsupportedOperationException();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/764/pattern-ver1-serial/drools-core.src.main.java.org.drools.core.base.mvel.MVELCompilationUnit.java-clear.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+throw new AssertionError();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/732/pattern-ver1-serial/src.org.mariotaku.gallery3d.util.MotionEventHelper.java-MotionEventHelper.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+int a=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+String OUTSTRING="";
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+int a=1;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+boolean b=true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public RandomDataGenerator(){
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public RandomDataGenerator(){
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java[123,132]
------------Candidate---------------
 public RandomDataGenerator(){
+long startTime=System.currentTimeMillis();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:14:45 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.AbstractRealDistribution.AbstractRealDistribution:[76, 77, 78]#1.0
Compute Candidate : 2019.09.04 AD at 23:16:53 CDT - 2019.09.04 AD at 23:20:15 CDT , PNumber : 11280, CandNumber : 31 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+random=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+synchronized(this){
 random=rng;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator bindingModes){
+random=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator collectorManager){
+random=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator parentFileShare){
+random=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator pIssued){
+random=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator Pin){
+random=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator graphdbInput){
+random=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator thePrescribeMedicationCntl){
+random=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator pScore){
+random=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator pterm){
+random=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
-protected AbstractRealDistribution(RandomGenerator rng){
-random=rng;
+protected AbstractRealDistribution(RandomGenerator boid){
+random=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+rng=rng;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+int a=0;
 random=rng;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+String OUTSTRING="";
 random=rng;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+int random=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+int a=1;
 random=rng;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+boolean random=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+boolean b=true;
 random=rng;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+assert (rng!=null);
 random=rng;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+assert (rng!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected AbstractRealDistribution(RandomGenerator rng){
 random=rng;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+assert (rng!=null):"Appointments day is not allowed to be null!";
 random=rng;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java[72,78]
------------Candidate---------------
 protected AbstractRealDistribution(RandomGenerator rng){
+long startTime=System.currentTimeMillis();
 random=rng;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:23:51 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.NormalDistribution.NormalDistribution:[71, 72]#1.0
Compute Candidate : 2019.09.04 AD at 23:26:00 CDT - 2019.09.04 AD at 23:30:47 CDT , PNumber : 11294, CandNumber : 18 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+mean++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+sd++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+mean--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+sd--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+mean=mean;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+sd=mean;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+mean=sd;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+sd=sd;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+int DEFAULT_INVERSE_ABSOLUTE_ACCURACY=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+boolean DEFAULT_INVERSE_ABSOLUTE_ACCURACY=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[62,72]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public NormalDistribution(double mean,double sd) throws NotStrictlyPositiveException{
 this(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:33:44 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.NormalDistribution.NormalDistribution:[86, 87]#1.0
Compute Candidate : 2019.09.04 AD at 23:36:03 CDT - 2019.09.04 AD at 23:40:12 CDT , PNumber : 11294, CandNumber : 26 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
-this(new Well19937c(),mean,sd,inverseCumAccuracy);
+this(new Well19937c(null),mean,sd,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
-this(new Well19937c(),mean,sd,inverseCumAccuracy);
+this(new Well19937c(1),mean,sd,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
-this(new Well19937c(),mean,sd,inverseCumAccuracy);
+this(new Well19937c(2),mean,sd,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
-this(new Well19937c(),mean,sd,inverseCumAccuracy);
+this(new Well19937c(1000),mean,sd,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1052/pattern-ver1-serial/src.main.java.net.dv8tion.jda.requests.WebSocketClientV2.java-close.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+mean++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+sd++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+inverseCumAccuracy++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+mean--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+sd--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+inverseCumAccuracy--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+mean=mean;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:42:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+sd=mean;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+inverseCumAccuracy=mean;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:42:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+mean=sd;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+sd=sd;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+inverseCumAccuracy=sd;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+mean=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+inverseCumAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[74,87]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public NormalDistribution(double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 this(new Well19937c(),mean,sd,inverseCumAccuracy);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:43:31 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.NormalDistribution.NormalDistribution:[104, 106, 110, 111, 112, 113]#1.0
Compute Candidate : 2019.09.04 AD at 23:45:43 CDT - 2019.09.04 AD at 23:54:22 CDT , PNumber : 11399, CandNumber : 143 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=1;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=1;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=1;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/6188/pattern-ver1-serial/GravityGame.GravityGameApplet.java-onEditLocX1.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=0;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=0;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=sd;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=inverseCumAccuracy;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=mean;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=inverseCumAccuracy;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=mean;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=2;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=2;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=2;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd>=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6682/pattern-ver1-serial/src.Geometry.Graham_Scan.java-leftTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=0.0;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=0.0;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=standardDeviation;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd==0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/870/pattern-ver1-serial/src.com.orange.game.zjh.statemachine.ZjhGameStateMachineBuilder.java-decideNextState.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=10;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=10;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=10;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=-1;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=-1;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double newState) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=newState;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4595/pattern-ver1-serial/src.main.java.com.sparta.is.armor.ArmorIS.java-setState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double newState,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=newState;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4595/pattern-ver1-serial/src.main.java.com.sparta.is.armor.ArmorIS.java-setState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double authoredForumsAmt,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=authoredForumsAmt;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7435/pattern-ver1-serial/msgcntr.messageforums-app.src.java.org.sakaiproject.tool.messageforums.ui.MessageForumStatisticsBean.java-setAuthoredForumsAmt.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:55:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double authoredForumsAmt) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=authoredForumsAmt;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7435/pattern-ver1-serial/msgcntr.messageforums-app.src.java.org.sakaiproject.tool.messageforums.ui.MessageForumStatisticsBean.java-setAuthoredForumsAmt.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
+mean++;
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
+sd++;
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
+inverseCumAccuracy++;
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+mean++;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+sd++;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+inverseCumAccuracy++;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+mean--;
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+sd--;
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+inverseCumAccuracy--;
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+synchronized(this){
 standardDeviation=sd;
+}
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+synchronized(this){
 this.mean=mean;
+}
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
+synchronized(this){
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double bindingModes,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=bindingModes;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double bindingModes) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double collectorManager,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=collectorManager;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double collectorManager) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double parentFileShare,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=parentFileShare;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double parentFileShare) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:56:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double pIssued,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=pIssued;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double Pin,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=Pin;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double Pin) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double newY,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=newY;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/827/pattern-ver1-serial/src.indigo.Entity.Entity.java-setY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double newY) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=newY;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/827/pattern-ver1-serial/src.indigo.Entity.Entity.java-setY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double graphdbInput,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=graphdbInput;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double graphdbInput) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
+mean++;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
+sd++;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
+inverseCumAccuracy++;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double thePrescribeMedicationCntl,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=thePrescribeMedicationCntl;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double pScore,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=pScore;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double pScore) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double pterm,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=pterm;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double pterm) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
+synchronized(this){
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
+}
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double boid,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=boid;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double boid) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.04 AD at 23:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double animationStyle,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=animationStyle;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3883/pattern-ver1-serial/app.src.main.java.com.shockn745.workoutmotivationaltool.motivation.recyclerview.animation.CardAnimator.java-setAnimationStyle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double mean,double sd,double animationStyle) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=animationStyle;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3883/pattern-ver1-serial/app.src.main.java.com.shockn745.workoutmotivationaltool.motivation.recyclerview.animation.CardAnimator.java-setAnimationStyle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+synchronized(this){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
+}
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+rng=rng;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+sd=sd;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(true){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=mean*mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=mean*sd;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=mean*inverseCumAccuracy;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=sd*mean;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=sd*sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=sd*inverseCumAccuracy;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy*mean;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy*sd;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+int a=0;
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+String OUTSTRING="";
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+int standardDeviation=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+int solverAbsoluteAccuracy=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(Double.isNaN(sd)){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+int STANDARD_DEVIATION=8;
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+int indexSelection=0;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
-standardDeviation=sd;
+this.mean=0;
+this.standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=0;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+this.solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+standardDeviation=0;
+this.solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+this.standardDeviation=sd;
+solverAbsoluteAccuracy=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+int a=1;
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+String STANDARD_DEVIATION="%#.&f";
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+boolean standardDeviation=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+boolean solverAbsoluteAccuracy=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+boolean b=true;
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0||sd==Long.MIN_VALUE){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double yy,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+mean=yy;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6317/pattern-ver1-serial/core.src.com.nnldev.fartlek.sprites.Obstacle.java-setY.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double perrCode,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+mean=perrCode;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6417/pattern-ver1-serial/src.main.java.com.bill.team02.week4.IORuntimeException.java-IORuntimeException.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+try{
 this.mean=mean;
+}finally{
 standardDeviation=sd;
+}
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+try{
 this.mean=mean;
-standardDeviation=sd;
+}finally{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}
+standardDeviation=sd;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+try{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}finally{
+standardDeviation=sd;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
+try{
 standardDeviation=sd;
+}finally{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+if(solverAbsoluteAccuracy==0){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
-public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
+public NormalDistribution(RandomGenerator rng,double r,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+mean=r;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
+assert (rng!=null);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+standardDeviation=1;
+solverAbsoluteAccuracy=inverseCumAccuracy+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+standardDeviation=sd+1;
+solverAbsoluteAccuracy=1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
-standardDeviation=sd;
+this.mean=mean+1;
+standardDeviation=1;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
-standardDeviation=sd;
+this.mean=1;
+standardDeviation=sd+1;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=1;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=mean+1;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0||"查看红包".equals(sd)){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0||sd==3){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<0||sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=(sd+sd)%sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=(inverseCumAccuracy+inverseCumAccuracy)%inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=(mean+mean)%mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=mean<0?0:mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=sd<0?0:sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy<0?0:inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0||sd==0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0||sd>9){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+try{
 standardDeviation=sd;
+}finally{
+this.mean=mean;
+}
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
 standardDeviation=sd;
+try{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}finally{
+this.mean=mean;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0&&sd<4000000){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0&&sd!=9999){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(0>0&&sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+assert (sd>=0):"Receive a negative tratment";
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
+assert (sd!=0):"Receive a size tratment";
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
-if(sd<=0){
+if(sd<=0||sd=='"'){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
-standardDeviation=sd;
+this.mean=mean*2;
+standardDeviation=sd*2;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=mean*2;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy*2;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+standardDeviation=sd*2;
+solverAbsoluteAccuracy=inverseCumAccuracy*2;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
-this.mean=mean;
+this.mean=Math.pow(10.0,mean/20.0);
 standardDeviation=sd;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
-standardDeviation=sd;
+standardDeviation=Math.pow(10.0,sd/20.0);
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[89,113]
------------Candidate---------------
 public NormalDistribution(RandomGenerator rng,double mean,double sd,double inverseCumAccuracy) throws NotStrictlyPositiveException{
 super(rng);
 if(sd<=0){
 throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
 }
 this.mean=mean;
 standardDeviation=sd;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=Math.pow(10.0,inverseCumAccuracy/20.0);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:03:48 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.NormalDistribution.density:[135, 136, 137]#1.0
Compute Candidate : 2019.09.05 AD at 00:05:56 CDT - 2019.09.05 AD at 00:12:44 CDT , PNumber : 11298, CandNumber : 82 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
- final double x0=x-mean;
+ double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ final double x1=(x0)/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
- final double x0=x-mean;
+ final double x0=x-x;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ final double x1=x0/x0;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ final double x1=x0/x;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
- final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ double x0=x-mean;
+ double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+x++;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+x--;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+x--;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+density(x0);
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+density(x);
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+density(x1);
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ final double x1=x0/(int)standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
- final double x1=x0/standardDeviation;
+ final double x1=x0/(double)standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
- final double x0=x-mean;
+ double x0=x-mean;
  final double x1=x0/standardDeviation;
+x0=x-mean;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/829/pattern-ver1-serial/java.canvas_data_tools.src.main.java.edu.harvard.data.canvas.phase_1.PostVerifyRequestsJob.java-setup.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+int a=0;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/standardDeviation*SQRT2PI*5;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+String OUTSTRING="";
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/(int)(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+double mean=8;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+double SQRT2PI=8;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+double standardDeviation=8;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+if(equals(x)){
+return 0d;
+}
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if(equals(x0)){
+return 0d;
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(equals(x1)){
+return 0d;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+int a=1;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/(double)(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+boolean b=true;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/x0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/x1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/x;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x0==x-mean){
+return x1;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x1==x0/standardDeviation){
+return x0;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if("index".equals(x0)){
+return 0;
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+if("index".equals(x)){
+return 0;
+}
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if("index".equals(x1)){
+return 0;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+if(x<0){
+return 0d;
+}
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if(x0<0){
+return 0d;
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x1<0){
+return 0d;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/(this.standardDeviation*this.SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/2137/pattern-ver1-serial/DesignPattern.src.builder.SaltWater.java-getWeight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+assert (x0!=x-mean);
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+assert (x1!=x0/standardDeviation);
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if((Thread.currentThread().interrupted())){
+return 0d;
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+double standardDeviation=this.standardDeviation;
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/290/pattern-ver1-serial/nars_logic.src.main.java.nars.task.DefaultTask.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+assert (x0>=0):"Receive a negative tratment";
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+assert (x>=0):"Receive a negative tratment";
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+assert (x1>=0):"Receive a negative tratment";
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double density(double x){
  final double x0=x-mean;
+assert (x0!=0):"Receive a size tratment";
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double density(double x){
+assert (x!=0):"Receive a size tratment";
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+assert (x1!=0):"Receive a size tratment";
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if(x0>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x1>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp((int)(-0.5*x1*x1))/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(Math.abs(-0.5*x1*x1))/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(Math.max(-0.5*x1*x1,0))/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return (FastMath.exp(-0.5*x1*x1))/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if(x0<0){
+return 0;
+}
+if(x0>=x){
+return x-1;
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+if(x<0){
+return 0;
+}
  final double x0=x-mean;
+if(x>=x0){
+return x0-1;
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x1<0){
+return 0;
+}
+if(x1>=x0){
+return x0-1;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if(x0<0){
+return 0;
+}
  final double x1=x0/standardDeviation;
+if(x0>=x1){
+return x1-1;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x1<0){
+return 0;
+}
+if(x1>=x){
+return x-1;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
+if(x<0){
+return 0;
+}
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x>=x1){
+return x1-1;
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
+if(x0==3){
+System.out.println("debug");
+}
+if(x0==3){
+System.out.println("debug");
+}
  final double x1=x0/standardDeviation;
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
+if(x1==3){
+System.out.println("debug");
+}
+if(x1==3){
+System.out.println("debug");
+}
 return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return density(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return (standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return 1+FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/2193/pattern-ver1-serial/Poker.src.fr.poker.model.Carte.java-compareValue.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI)+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return (double)FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return -FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return x1;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return x;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return x0;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return FastMath.exp(-0.5*x1*x1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4309/pattern-ver1-serial/source.src.com.bizcom.vc.activity.conversation.ConversationSelectFile.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:18:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return (double)(FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:19:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return (double)Math.sqrt(-0.5*x1*x1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/4236/pattern-ver1-serial/app.src.main.java.com.bq.robotic.robopad_plusplus.utils.ScaleImageView.java-distance.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java[133,138]
------------Candidate---------------
 public double density(double x){
  final double x0=x-mean;
  final double x1=x0/standardDeviation;
-return FastMath.exp(-0.5*x1*x1)/(standardDeviation*SQRT2PI);
+return Math.signum(standardDeviation*SQRT2PI);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/3362/pattern-ver1-serial/h2o-genmodel.src.main.java.hex.genmodel.algos.glrm.GlrmLoss.java-lgrad.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:19:09 CDT
--------------- END -----------------
Location : org.apache.commons.math3.util.FastMath.exp:[831]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 00:21:18 CDT - 2019.09.05 AD at 00:26:04 CDT , PNumber : 11304, CandNumber : 19 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+log(x);
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+int a=0;
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+String OUTSTRING="";
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+int a=1;
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+boolean b=true;
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return exp(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+if("index".equals(x)){
+return 0;
+}
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return 1+exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:26:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/2193/pattern-ver1-serial/Poker.src.fr.poker.model.Carte.java-compareValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+if(x<0){
+return 0d;
+}
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return exp(x,0.0,null)+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return (double)exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return -exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return x;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
-return exp(x,0.0,null);
+return (double)(exp(x,0.0,null));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+assert (x>=0):"Receive a negative tratment";
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double exp(double x){
+assert (x!=0):"Receive a size tratment";
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:31:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[810,832]
------------Candidate---------------
 public static double exp(double x){
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return exp(x,0.0,null);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 00:31:13 CDT
--------------- END -----------------
Location : org.apache.commons.math3.util.FastMath.exp:[850, 851, 853, 861, 871, 881, 883, 884, 886, 888, 890, 898, 899, 906, 907, 908, 914, 923, 924, 925, 926, 927, 934, 935, 941, 943, 946, 949, 955]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 00:33:17 CDT - 2019.09.05 AD at 02:06:07 CDT , PNumber : 7778, CandNumber : 709 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
-double z=0.04168702;
+ double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
- final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
+ double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
- final double tempC=tempB+tempA;
+ double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
- final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+ double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
-double tempA=intPartA*fracPartA;
+ double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+ double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>1){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>1){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>1){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==0){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>=746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>=709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>=709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+return 0d;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
+return 0d;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+return 0d;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+return 0d;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<=0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+intVal=(int)x;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+intVal=(int)-x;
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
+intVal=(int)-x;
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
+intVal=(int)x;
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
+z=z*epsilon+0.16666666;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
+z=z*epsilon+0.5;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
+z=z*epsilon+1.0;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
+z=z*epsilon+-3.9405104E-20;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+z=z*epsilon+-3.9405104E-20;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+z=z*epsilon+-3.9405104E-20;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(intVal+(intFrac)/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-((intVal)+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=(x)-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x>0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra==0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)((extra-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)((intVal-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)((intPartA-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)((intPartB-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal<=709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(intVal-intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
- final double tempC=tempB+tempA;
+ final double tempC=tempB-tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z*epsilon-0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=z*epsilon-0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=z*epsilon-1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z-tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
-intVal++;
+intVal--;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(x==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(extra==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal>=709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal!=746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal!=709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal!=709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal<746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5482/pattern-ver1-serial/src.main.java.capstat.model.Match.java-calculateStartingPlayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal<709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5482/pattern-ver1-serial/src.main.java.capstat.model.Match.java-calculateStartingPlayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal<709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5482/pattern-ver1-serial/src.main.java.capstat.model.Match.java-calculateStartingPlayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
- final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
+ final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[1];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
- final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+ final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[1];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal!=709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
+return 0;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+return 0;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final Integer intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(hiPrec!=null){
+hiPrec[0]=0.0;
+hiPrec[1]=0.0;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
+}
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
+if(hiPrec!=null){
+hiPrec[0]=0.0;
+hiPrec[1]=0.0;
+}
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
+}
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
+}
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
+}
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
+return 0;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+return 0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+return 0;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-2];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-2];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)((x-2)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)((x-intVal)*2);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=extra-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/3851/pattern-ver1-serial/src.main.java.com.sandagerdi.Operation.java-substraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
- final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
+ final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[0];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
- final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+ final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[0];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return Integer.MAX_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra<0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal==746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6762/pattern-ver1-serial/metastore.src.java.org.apache.hadoop.hive.metastore.hbase.HBaseFilterPlanUtil.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal==709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6762/pattern-ver1-serial/metastore.src.java.org.apache.hadoop.hive.metastore.hbase.HBaseFilterPlanUtil.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal==709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6762/pattern-ver1-serial/metastore.src.java.org.apache.hadoop.hive.metastore.hbase.HBaseFilterPlanUtil.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
- final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
+ final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[2];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
- final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+ final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[2];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return x;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return extra;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
-return 0.0;
+return x;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
-return result;
+return x;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
-return result;
+return x;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
-return 0.0;
+return extra;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
-return result;
+return extra;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
-return result;
+return extra;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal>709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra>0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(intVal+1.0/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(1.0+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=1.0-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>3){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>3){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>3){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal==709){
+ final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
+}
+return result;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal>746){
+if(hiPrec!=null){
+hiPrec[0]=0.0;
+hiPrec[1]=0.0;
+}
+return 0.0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal>709){
+ final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
+}
+return result;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal>709){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
+}
+return Double.POSITIVE_INFINITY;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal<=746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4868/pattern-ver1-serial/src.main.java.com.offbynull.portmapper.pcp.messages.PcpResponse.java-dump.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal<=709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4868/pattern-ver1-serial/src.main.java.com.offbynull.portmapper.pcp.messages.PcpResponse.java-dump.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal<=709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4868/pattern-ver1-serial/src.main.java.com.offbynull.portmapper.pcp.messages.PcpResponse.java-dump.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=intVal*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=intVal*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+intVal*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+tempC*extra+intVal*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
-hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+hiPrec[1]=intVal*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return intVal;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
-return 0.0;
+return intVal;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
-return result;
+return intVal;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
-return result;
+return intVal;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
-return Double.POSITIVE_INFINITY;
+return intVal;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return intPartA;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return intPartB;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
- final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
+ final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intVal];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=-2;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=z*epsilon+-2;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return fracPartA;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return fracPartB;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return exp(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
-double intPartA;
+ final double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
-double intPartB;
+ final double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=1;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=1;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=-1;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=-1;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
- final double result;
+ double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
- final double result;
+ double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
-int intVal;
+ int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
-double intPartA;
+ double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
-double intPartB;
+ double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
-int intVal;
+ int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+ double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+ double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=0;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=0;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=2;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=2;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=3;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=3;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import java.util.Iterator;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==-1){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>=709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>=709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+intVal++;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
+intVal++;
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
+z++;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
+tempA++;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
+x++;
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
+extra++;
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+x++;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
+intVal++;
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
+intVal++;
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+intVal++;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+intVal++;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+intVal--;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+intVal--;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+x--;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+x--;
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+extra--;
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
+intVal--;
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+intVal--;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+intVal--;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
+tempA++;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=10;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=10;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=100;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=100;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal!=0){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+exp(x);
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+exp(extra);
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+exp(x);
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+exp(extra);
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
-return result;
+return 0.0;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
-return result;
+return 0.0;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return 0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
- final double tempC=tempB+tempA;
+ final double tempC=tempB+(int)(tempA);
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+(int)(intVal)];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+tempB+(int)(tempA);
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+(int)(intVal)];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+(int)(tempB)+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z*epsilon+(int)(0.16666666);
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+x++;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+extra++;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+x++;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+-1];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+-1];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
- final double tempC=tempB+tempA;
+ final double tempC=tempB+-1;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z*epsilon+-1;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=z*epsilon+-1;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=z*epsilon+-1;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=z*epsilon+-1;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+-1+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(intVal+intFrac/(int)1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=1;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=-1;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
-if(hiPrec!=null){
+if(hiPrec.equals(null)){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=0;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+if(-intVal!=0){
 intVal=-intVal;
+}
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)(x-intVal*100*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
- final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
+ final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac-1];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
- final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+ final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac-1];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
-int intVal;
+ @SuppressWarnings("UnusedAssignment") int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ @SuppressWarnings("UnusedAssignment") double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ @SuppressWarnings("UnusedAssignment") double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
- final double result;
+ @SuppressWarnings("UnusedAssignment") double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
-double intPartA;
+ @SuppressWarnings("UnusedAssignment") double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ @SuppressWarnings("UnusedAssignment") double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
-double intPartB;
+ @SuppressWarnings("UnusedAssignment") double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ @SuppressWarnings("UnusedAssignment") double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
-int intVal;
+ @SuppressWarnings("UnusedAssignment") int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
-double z=0.04168702;
+ @SuppressWarnings("UnusedAssignment") double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
-double z=0.04168702;
+ @SuppressWarnings("UnusedAssignment") double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
- final double result;
+ @SuppressWarnings("UnusedAssignment") double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
-double intPartA;
+ @SuppressWarnings("UnusedAssignment") double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
-double z=0.04168702;
+ @SuppressWarnings("UnusedAssignment") double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
-double intPartB;
+ @SuppressWarnings("UnusedAssignment") double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
-double z=0.04168702;
+ @SuppressWarnings("UnusedAssignment") double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+ @SuppressWarnings("UnusedAssignment") double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ @SuppressWarnings("UnusedAssignment") double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+ @SuppressWarnings("UnusedAssignment") double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ @SuppressWarnings("UnusedAssignment") int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ @SuppressWarnings("UnusedAssignment") double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return 1+result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal]=x;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal]=x;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+x=x;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=3;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x+1-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
- final double tempC=tempB+tempA;
+ final double tempC=tempB+1+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z*epsilon+1+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=z*epsilon+1+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=z*epsilon+1+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=z*epsilon+1+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+1+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=intPartA*fracPartB+1+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+1+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+1+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+x=x;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+hiPrec=hiPrec;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal+x==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal+extra==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal+intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
-double intPartA;
-double intPartB;
+ final double intPartA;
+ final double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+ final double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
-double intPartA;
+ final double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+ final double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
-double intPartB;
+ final double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+ final double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[1];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[1];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[1];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[1];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal]=1000;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal]=1000;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+intVal=1000;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(true){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
-if(hiPrec!=null){
+if(true){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(true){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(true){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(true){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(true){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(true){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
-return result;
+return result+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[0];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[0];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[0];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[0];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=0xEfffffff&((int)-x);
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intVal=0xEfffffff&(-intVal);
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=0xEfffffff&((int)x);
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=10;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[2];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[2];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[2];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[2];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746/2){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709/2){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709/2){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+int a=0;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+int a=0;
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
+int a=0;
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+int a=0;
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
+int a=0;
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
+int a=0;
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
+int a=0;
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
+int a=0;
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
+int a=0;
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+int a=0;
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=z+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=z+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)(x-intVal*5*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=intPartA+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+String OUTSTRING="";
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+String OUTSTRING="";
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
+String OUTSTRING="";
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+String OUTSTRING="";
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
+String OUTSTRING="";
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
+String OUTSTRING="";
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+String OUTSTRING="";
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
+String OUTSTRING="";
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
+String OUTSTRING="";
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
+String OUTSTRING="";
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=100;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=intVal+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=intVal+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=intVal+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=intVal+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)(intVal*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(Double.isNaN(x)){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(Double.isNaN(intVal)){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(Double.isNaN(intVal)){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(Double.isNaN(intVal)){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(Double.isNaN(intVal)){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(Double.isNaN(extra)){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(intVal+(int)(intFrac/1024.0));
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=intPartA*fracPartB+intPartB*fracPartA+(int)(intPartB*fracPartB);
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)(x*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
-double tempA=intPartA*fracPartA;
+double tempA=1.0*intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=1.0*intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=intPartA*fracPartB+1.0*intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=intPartA*fracPartB+intPartB*fracPartA+1.0*intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=1.0*z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=1.0*tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=1.0*tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+1.0*tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+tempC*extra+1.0*tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
-hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+hiPrec[1]=1.0*tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
-double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
+double tempB=intPartA*fracPartB+-1+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)Math.floor(x);
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.floor(x-intVal);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(intVal+(int)intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+double EXP_INT_TABLE_A=8;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+double EXP_INT_TABLE_B=8;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+double POSITIVE_INFINITY=8;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=1;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=1;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=1;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=1;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=-1;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=-1;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=-1;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=-1;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}
+if(hiPrec==null){
+return 0d;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(hiPrec==null){
+return 0d;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=0;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=0;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=0;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+if("index".equals(x)){
+return 0;
+}
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+if("index".equals(hiPrec)){
+return 0;
+}
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if("index".equals(x)){
+return 0;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if("index".equals(extra)){
+return 0;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if("index".equals(hiPrec)){
+return 0;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
+if("index".equals(hiPrec)){
+return 0;
+}
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+if("index".equals(x)){
+return 0;
+}
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+if("index".equals(extra)){
+return 0;
+}
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=2;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=2;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=2;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=2;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=3;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=3;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=3;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=3;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal]*x;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal]*extra;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal]*x;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal]*extra;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}
+if(x<0){
+return 0d;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}
+if(extra<0){
+return 0d;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(x<0){
+return 0d;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(extra<0){
+return 0d;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
+if(x<0){
+return 0d;
+}
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+if(x<0){
+return 0d;
+}
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+if(extra<0){
+return 0d;
+}
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0||x==Long.MIN_VALUE){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746||intVal==Long.MIN_VALUE){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709||intVal==Long.MIN_VALUE){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709||intVal==Long.MIN_VALUE){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709||intVal==Long.MIN_VALUE){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0||extra==Long.MIN_VALUE){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=10;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=10;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=10;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=10;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=intVal;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=intVal;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=100;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=100;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=100;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=100;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)Math.max(-x,1);
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)Math.max(x,1);
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max(x-intVal,1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max(x,1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=(int)Math.max(x,1);
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max((x-intVal),1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max(intVal,1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max(1024.0,1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+if(hiPrec==null){
+return 0d;
+}
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+assert (hiPrec!=null);
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+assert (hiPrec!=null);
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
+assert (hiPrec!=null);
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=0.0;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=0.0;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=0.0;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=0.0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+if(hiPrec.equals(InputStream.class)){
+return x;
+}
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(hiPrec!=null){
+intVal=(int)-x;
+if(intVal>746){
+if(hiPrec!=null){
+hiPrec[0]=0.0;
+hiPrec[1]=0.0;
+}
+return 0.0;
+}
+if(intVal>709){
+ final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
+}
+return result;
+}
+if(intVal==709){
+ final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
+}
+return result;
+}
+intVal++;
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intVal=-intVal;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0||"查看红包".equals(x)){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
-if(hiPrec!=null){
+if(hiPrec!=null||"查看红包".equals(hiPrec)){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746||"查看红包".equals(intVal)){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709||"查看红包".equals(intVal)){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709||"查看红包".equals(intVal)){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709||"查看红包".equals(intVal)){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0||"查看红包".equals(extra)){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0||x==3){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746||intVal==3){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709||intVal==3){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709||intVal==3){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709||intVal==3){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0||extra==3){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=1;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=1;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=1;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=-1;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=-1;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=-1;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=0;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=0;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-intVal+intFrac/1024.0*100;
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=2;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=2;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=2;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=3;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=3;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=3;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0||x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal<0||intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal<0||intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal<0||intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal<0||intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra<0||extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+intVal=-intVal;
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+hiPrec[0]=0.0;
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+hiPrec[1]=0.0;
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+hiPrec[0]=Double.POSITIVE_INFINITY;
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=epsilon;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=epsilon;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=epsilon;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+hiPrec[0]=0.0;
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+hiPrec[1]=0.0;
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+hiPrec[0]=0.0;
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+hiPrec[1]=0.0;
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+hiPrec[0]=Double.POSITIVE_INFINITY;
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
+hiPrec[0]=Double.POSITIVE_INFINITY;
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
+hiPrec[1]=0.0;
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
+hiPrec[1]=0.0;
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=(ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal]+intVal)%intVal;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=(ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal]+intVal)%intVal;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
-hiPrec[0]=tempA;
+hiPrec[0]=(tempA+tempA)%tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
+hiPrec[1]=0.0;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
+hiPrec[0]=0.0;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-2;
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+hiPrec[0]=0.0;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+hiPrec[1]=0.0;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[0]=Double.POSITIVE_INFINITY;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[1]=0.0;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[0]=0.0;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
-hiPrec[0]=tempA;
+hiPrec[0]=tempA<0?0:tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=10;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=10;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=10;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
-hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+hiPrec[0]=0.0;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
-hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+hiPrec[1]=0.0;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+hiPrec[0]=0.0;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+hiPrec[1]=0.0;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
-hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+hiPrec[1]=0.0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+hiPrec[1]=0.0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+hiPrec[0]=Double.POSITIVE_INFINITY;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+hiPrec[0]=Double.POSITIVE_INFINITY;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
-hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
+hiPrec[0]/=4.455506;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
 }
 return result;
 }
+hiPrec[1]/=4.455506;
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0||x==0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746||intVal==0){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709||intVal==0){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709||intVal==0){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709||intVal==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0||extra==0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=z*epsilon;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=z*epsilon;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-intVal+intFrac/1024.0*5;
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=z*epsilon;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0||x>9){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746||intVal>9){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709||intVal>9){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709||intVal>9){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709||intVal>9){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0||extra>9){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=100;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=100;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=100;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max((x-intVal)*1024.0,1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.max(((x-intVal)*1024.0),1);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+hiPrec[0]=0.0;
 if(intVal>746){
 if(hiPrec!=null){
-hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+hiPrec[1]=0.0;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
-hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[0]/=4.455506;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[1]/=4.455506;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[0]/=2.85040092E17;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
+hiPrec[1]/=2.85040092E17;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+try{
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}finally{
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+try{
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}finally{
+hiPrec[1]=0.0;
+}
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+intVal=(int)x;
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+hiPrec[0]=Double.POSITIVE_INFINITY;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+hiPrec[0]=0.0;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+hiPrec[1]=0.0;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+hiPrec[0]/=4.455506;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+hiPrec[1]/=4.455506;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
-z=z*epsilon+0.16666666;
+z=0.0;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
-z=z*epsilon+0.5;
+z=0.0;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
-z=z*epsilon+1.0;
+z=0.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0&&x<4000000){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746&&intVal<4000000){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709&&intVal<4000000){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709&&intVal<4000000){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709&&intVal<4000000){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0&&extra<4000000){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
+hiPrec[0]=tempA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
-hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
-if(hiPrec!=null){
+if(hiPrec!=null||hiPrec==null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(int)((intVal+intFrac/1024.0));
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+hiPrec[0]/=4.455506;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/5994/pattern-ver1-serial/repository.src.org.pentaho.platform.repository2.unified.webservices.RepositoryFileTreeAdapter.java-RepositoryFileTreeAdapter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+hiPrec[0]/=2.85040092E17;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/5994/pattern-ver1-serial/repository.src.org.pentaho.platform.repository2.unified.webservices.RepositoryFileTreeAdapter.java-RepositoryFileTreeAdapter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+if(intVal<=0){
+return -1;
+}
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+if(intVal<=0){
+return -1;
+}
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal<=0){
+return -1;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
+if(z<=0){
+return -1;
+}
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
+if(z<=0){
+return -1;
+}
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
+if(z<=0){
+return -1;
+}
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
+if(z<=0){
+return -1;
+}
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
+intVal=-intVal;
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
+intVal=-intVal;
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
+intVal=-intVal;
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
+intVal=-intVal;
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
+intVal=-intVal;
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
+intVal=-intVal;
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
+intVal=-intVal;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-intVal;
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(x<0.0&&x!=9999){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746&&intVal!=9999){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709&&intVal!=9999){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709&&intVal!=9999){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709&&intVal!=9999){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(extra!=0.0&&extra!=9999){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
-if(x<0.0){
+if(0.0>0&&x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(746>0&&intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(709>0&&intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(709>0&&intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(709>0&&intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
-if(extra!=0.0){
+if(0.0>0&&extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.floor((x-intVal));
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.floor(x);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.floor((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.floor(intVal);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
- final int intFrac=(int)((x-intVal)*1024.0);
+ final int intFrac=(int)Math.floor(1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
- final double epsilon=x-(intVal+intFrac/1024.0);
+ final double epsilon=x-(int)(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}
+if(extra>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(extra>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC+z*tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
+if(intVal<0){
+intVal=0;
+}
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+if(intVal<0){
+intVal=0;
+}
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
+if(intVal<0){
+intVal=0;
+}
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+if(intPartA<0){
+intPartA=0;
+}
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+if(intPartB<0){
+intPartB=0;
+}
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+if(intPartA<0){
+intPartA=0;
+}
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+if(intPartB<0){
+intPartB=0;
+}
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal<0){
+intVal=0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intPartA<0){
+intPartA=0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=epsilon;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
+}
+if(intVal<=0){
+intVal=1;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+if(intVal<=0){
+intVal=1;
+}
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
+if(intVal<=0){
+intVal=1;
+}
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
+if(z>epsilon){
+z=epsilon;
+}
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+if(intVal>intFrac){
+intVal=intFrac;
+}
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+boolean haveBreadCrumbs=false;
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709&&haveBreadCrumbs){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+boolean haveBreadCrumbs=false;
+if(intVal>709&&haveBreadCrumbs){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=z*epsilon;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+ final double result=x/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+ final double result=extra/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+ final double result=x/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+ final double result=extra/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[0]=Double.POSITIVE_INFINITY*2;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
-hiPrec[0]=tempA;
+hiPrec[0]=tempA*2;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
+intVal=(int)x*2;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+intVal=(int)-x;
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746-1){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709-1){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
+if(intVal>746-1){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709-1){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+if(intVal>709-1){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
+if(intVal>709-1){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
+z=0;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/506/pattern-ver1-serial/MetaChessApp.src.engine.board.ExtendedBoardModel.java-getFurthestPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=0;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=(tempC*z+tempB+tempA+tempA)%tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+tempB;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/2975/pattern-ver1-serial/src.SAP.java-SAP.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempB;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/2975/pattern-ver1-serial/src.SAP.java-SAP.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal]*2;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal]*2;
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal]*2;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal]*2;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+tempB*tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
+z=z*epsilon+-3.9405104E-20;
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
+z=z*epsilon+-3.9405104E-20;
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
-z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
+z=z*epsilon+-3.9405104E-20;
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+boolean haveBreadCrumbs=false;
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
+haveBreadCrumbs=true;
 return result;
 }
-if(intVal==709){
+if(intVal==709&&haveBreadCrumbs){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+boolean haveBreadCrumbs=false;
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709&&haveBreadCrumbs){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
+haveBreadCrumbs=true;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
+boolean haveBreadCrumbs=false;
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
+haveBreadCrumbs=true;
 }
 return result;
 }
-if(intVal==709){
+if(intVal==709&&haveBreadCrumbs){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
-if(intVal>709){
+boolean haveBreadCrumbs=false;
+if(intVal>709&&haveBreadCrumbs){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
+haveBreadCrumbs=true;
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(x<0){
+return 0;
+}
+if(x>=extra){
+return extra-1;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(extra<0){
+return 0;
+}
+if(extra>=x){
+return x-1;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+if(x==3){
+System.out.println("debug");
+}
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+if(x==3){
+System.out.println("debug");
+}
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
+if(extra==3){
+System.out.println("debug");
+}
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+if(extra==3){
+System.out.println("debug");
+}
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(x==3){
+System.out.println("debug");
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(x==3){
+System.out.println("debug");
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(extra==3){
+System.out.println("debug");
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}
+if(extra==3){
+System.out.println("debug");
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
+result=tempC*z+tempB+tempA*2;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal<0){
+intVal--;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
+if(z<0){
+z--;
+}
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal<0){
+intVal--;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
+if(z<0){
+z--;
+}
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal<0){
+intVal--;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
+if(z<0){
+z--;
+}
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+}
+if(intVal<0){
+intVal--;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
+if(z<0){
+z--;
+}
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
-if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
+intVal=(int)-x;
+if(intVal>746){
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
-if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
-}
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
+}
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
-if(hiPrec!=null){
-hiPrec[0]/=2.85040092E17;
-hiPrec[1]/=2.85040092E17;
-}
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
-if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
+intVal=(int)x;
+if(intVal>709){
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=0.0;
+hiPrec[1]=0.0;
+}
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
+}
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
+}
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
+}
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}else {
+hiPrec[0]=0.0;
+hiPrec[1]=0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
-if(intVal>709){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
-hiPrec[1]=0.0;
-}
-return Double.POSITIVE_INFINITY;
-}
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 0, DEL : 15
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
-if(intVal>746){
-if(hiPrec!=null){
-hiPrec[0]=0.0;
-hiPrec[1]=0.0;
-}
-return 0.0;
-}
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 0, DEL : 15
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
-hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+hiPrec[1]=extra;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
-hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+hiPrec[1]=(tempC*extra*z+tempC*extra+tempC*z+tempB+tempB)%tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
-hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+hiPrec[1]=tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=extra;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=(tempC*extra*z+tempC*extra+tempC*z+tempB+tempA+tempA)%tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+hiPrec[28]=(byte)0x88;
+hiPrec[29]=0x58;
+hiPrec[30]=0x01;
+hiPrec[31]=0x00;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
+hiPrec[28]=(byte)0x88;
+hiPrec[29]=0x58;
+hiPrec[30]=0x01;
+hiPrec[31]=0x00;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+tempC*extra+tempC*z+tempB*tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+hiPrec[0]=Math.round(hiPrec[0]*100.0)/100.0;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=Math.round(intPartA*100.0)/100.0;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+hiPrec[0]=Math.round(hiPrec[0]*100.0)/100.0;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=Math.round(intPartB*100.0)/100.0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=Math.round(intPartA*100.0)/100.0;
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=Math.round(intPartB*100.0)/100.0;
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+hiPrec[1]=Math.round(hiPrec[1]*100.0)/100.0;
+hiPrec[0]=Math.round(hiPrec[0]*100.0)/100.0;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
+hiPrec[0]=Math.round(hiPrec[0]*100.0)/100.0;
+hiPrec[1]=Math.round(hiPrec[1]*100.0)/100.0;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
-hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB*2;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
+intVal=(int)-x*2;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA*2;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
+}else {
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
+}else {
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
-}
-return result;
-}
-if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
-if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 0, INS : 0, DEL : 25
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
+}
+return result;
+}
+if(intVal==709){
+ final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
+if(hiPrec!=null){
+hiPrec[0]/=4.455506;
+hiPrec[1]/=4.455506;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
+}
+if(intVal>709){
+ final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
+if(hiPrec!=null){
+hiPrec[0]/=2.85040092E17;
+hiPrec[1]/=2.85040092E17;
+}
+return result;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
-result=tempC*z+tempB+tempA;
-}
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+}
+result=tempC*z+tempB+tempA;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
-result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
-}else {
-result=tempC*z+tempB+tempA;
-}
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
+}
+result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
+}else {
+result=tempC*z+tempB+tempA;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
 intVal=(int)-x;
 if(intVal>746){
 if(hiPrec!=null){
 hiPrec[0]=0.0;
 hiPrec[1]=0.0;
 }
 return 0.0;
 }
 if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
 }
 return result;
 }
 if(intVal==709){
  final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
 hiPrec[0]/=4.455506;
 hiPrec[1]/=4.455506;
 }
 return result;
 }
 intVal++;
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 intVal=-intVal;
 }else {
-intVal=(int)x;
-if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
-}
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 31, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
-if(intVal>746){
-if(hiPrec!=null){
-hiPrec[0]=0.0;
-hiPrec[1]=0.0;
-}
-return 0.0;
-}
-if(intVal>709){
  final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
 if(hiPrec!=null){
 hiPrec[0]/=2.85040092E17;
 hiPrec[1]/=2.85040092E17;
-}
-return result;
-}
-if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
-if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
 }
 return result;
-}
-intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 88, UPD : 88, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
-if(intVal>746){
-if(hiPrec!=null){
-hiPrec[0]=0.0;
-hiPrec[1]=0.0;
-}
-return 0.0;
-}
+intVal=(int)x;
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
-if(hiPrec!=null){
-hiPrec[0]/=2.85040092E17;
-hiPrec[1]/=2.85040092E17;
-}
-return result;
-}
-if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
 }
-return result;
+return Double.POSITIVE_INFINITY;
 }
-intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }else {
-intVal=(int)x;
+intVal=(int)-x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 92, UPD : 92, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
-if(intVal>746){
-if(hiPrec!=null){
-hiPrec[0]=0.0;
-hiPrec[1]=0.0;
-}
-return 0.0;
-}
+intVal=(int)x;
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
-if(hiPrec!=null){
-hiPrec[0]/=2.85040092E17;
-hiPrec[1]/=2.85040092E17;
-}
-return result;
-}
-if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
 }
-return result;
+return Double.POSITIVE_INFINITY;
 }
-intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 92, UPD : 92, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
-if(intVal>746){
-if(hiPrec!=null){
-hiPrec[0]=0.0;
-hiPrec[1]=0.0;
-}
-return 0.0;
-}
+intVal=(int)x;
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
-if(hiPrec!=null){
-hiPrec[0]/=2.85040092E17;
-hiPrec[1]/=2.85040092E17;
-}
-return result;
-}
-if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
 }
-return result;
+return Double.POSITIVE_INFINITY;
 }
-intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
 intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 94, UPD : 94, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_11_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[834,956]
------------Candidate---------------
 private static double exp(double x,double extra,double[] hiPrec){
 double intPartA;
 double intPartB;
 int intVal;
 if(x<0.0){
-intVal=(int)-x;
-if(intVal>746){
-if(hiPrec!=null){
-hiPrec[0]=0.0;
-hiPrec[1]=0.0;
-}
-return 0.0;
-}
+intVal=(int)x;
 if(intVal>709){
- final double result=exp(x+40.191406,extra,hiPrec)/2.85040092E17;
-if(hiPrec!=null){
-hiPrec[0]/=2.85040092E17;
-hiPrec[1]/=2.85040092E17;
-}
-return result;
-}
-if(intVal==709){
- final double result=exp(x+1.4941406,extra,hiPrec)/4.455506;
 if(hiPrec!=null){
-hiPrec[0]/=4.455506;
-hiPrec[1]/=4.455506;
+hiPrec[0]=Double.POSITIVE_INFINITY;
+hiPrec[1]=0.0;
 }
-return result;
+return Double.POSITIVE_INFINITY;
 }
-intVal++;
-intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
-intVal=-intVal;
+intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
 }else {
 intVal=(int)x;
 if(intVal>709){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[1]=0.0;
 }
 return Double.POSITIVE_INFINITY;
 }
 intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
-intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
+intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
 }
  final int intFrac=(int)((x-intVal)*1024.0);
  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
  final double epsilon=x-(intVal+intFrac/1024.0);
 double z=0.04168702;
 z=z*epsilon+0.16666666;
 z=z*epsilon+0.5;
 z=z*epsilon+1.0;
 z=z*epsilon+-3.9405104E-20;
 double tempA=intPartA*fracPartA;
 double tempB=intPartA*fracPartB+intPartB*fracPartA+intPartB*fracPartB;
  final double tempC=tempB+tempA;
  final double result;
 if(extra!=0.0){
 result=tempC*extra*z+tempC*extra+tempC*z+tempB+tempA;
 }else {
 result=tempC*z+tempB+tempA;
 }
 if(hiPrec!=null){
 hiPrec[0]=tempA;
 hiPrec[1]=tempC*extra*z+tempC*extra+tempC*z+tempB;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 94, UPD : 94, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution]
---------START : 2019.09.04 AD at 21:05:39 CDT
---------TIME : 2019.09.05 AD at 02:06:07 CDT
--------------- END -----------------
Finish : math-11 > patch : 0 | Start : Wed Sep 04 21:05:39 CDT 2019 | End : 2019.09.05 AD at 02:06:07 CDT
