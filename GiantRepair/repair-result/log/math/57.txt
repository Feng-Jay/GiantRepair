Repair : math_57
Current failed test : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances | 2019.09.06 AD at 17:55:26 CDT
Location : org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.KMeansPlusPlusClusterer:[69, 70]#0.5773502691896258
Compute Candidate : 2019.09.06 AD at 17:56:37 CDT - 2019.09.06 AD at 18:00:38 CDT , PNumber : 11280, CandNumber : 14 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+random=random;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+int EmptyClusterStrategy=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+int LARGEST_VARIANCE=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+boolean LARGEST_VARIANCE=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+boolean EmptyClusterStrategy=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:02:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+assert (random!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[61,70]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public KMeansPlusPlusClusterer(Random random){
 this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 18:03:13 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.cluster:[134, 95, 96, 99, 100]#0.5773502691896258
Compute Candidate : 2019.09.06 AD at 18:03:56 CDT - 2019.09.06 AD at 19:18:15 CDT , PNumber : 11432, CandNumber : 374 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;k<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;maxIterations<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:18:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
-return clusters;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final long max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Solution---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=(maxIterations<=0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count<=max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Collection;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,myUid;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,DEFAULT_TIMEOUT2;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=(maxIterations>0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count>max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,MAX_SERVICE_NODES;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,MAX_ZK_WAIT_RETRY_TIMES;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+break;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final float max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
-return clusters;
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/1194/pattern-ver1-serial/src.backend.rest.SaveUserCompetences.java-saveUserCompetences.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count<max;count--){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
-throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS,points);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6885/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.gateway.src.main.java.org.wso2.carbon.apimgt.gateway.handlers.logging.APILogMessageHandler.java-mediate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>(k);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7124/pattern-ver1-serial/src.server.repository.SDMSIndex.java-getUnique.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final Integer max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
-throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS,clusters);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,localLevel;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
-clusters=newClusters;
+clusters=clusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
-newClusters.add(new Cluster<T>(newCenter));
+newClusters.add(k,new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2664/pattern-ver1-serial/NightgamesMod.nightgames.skills.Unstrip.java-resolve.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>(clusters);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>(max);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count<max;count++,new ArrayList<KeyBinding>()){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
-throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS,maxIterations);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6212/pattern-ver1-serial/src.main.java.org.bigml.binding.LocalEnsemble.java-LocalEnsemble.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=(maxIterations<0)?Integer.MAX_VALUE:1;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4284/pattern-ver1-serial/object-filter.src.main.java.org.infinispan.objectfilter.impl.util.Interval.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,_afterComposeMethodCache;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
-newClusters.add(new Cluster<T>(newCenter));
+clusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3629/pattern-ver1-serial/Mage.Sets.src.mage.sets.theros.PolisCrusher.java-adjustTargets.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.List;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,mActions;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+break;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/3698/pattern-ver1-serial/src.org.nutz.lang.Invoking.java-Invoking.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=(maxIterations<0)?Integer.MAX_VALUE:0;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1552/pattern-ver1-serial/src.main.java.net.sourceforge.fenixedu.domain.Tutorship.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+assignPointsToClusters(clusters,points);
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+assignPointsToClusters(clusters,points);
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+assignPointsToClusters(clusters,points);
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+assignPointsToClusters(clusters,points);
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assignPointsToClusters(clusters,points);
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+assignPointsToClusters(newClusters,points);
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+assignPointsToClusters(newClusters,points);
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+assignPointsToClusters(newClusters,points);
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count<max;count++,new ArrayList<>()){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,mRelationId;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+ final List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
- final T newCenter;
+ T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+ List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
-boolean clusteringChanged=false;
+ boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
- final T newCenter;
+ T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.ArrayList;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
-return clusters;
+return new ArrayList<>(clusters);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2266/pattern-ver1-serial/src.com.homework.parts.Sentence.java-getNumbers.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters.isEmpty()){
+continue;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6775/pattern-ver1-serial/Salvum.src.br.ufpe.cin.analyses.Main.java-run.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+count++;
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+count++;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+count++;
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+count++;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+count++;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Solution---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+ final int max=(maxIterations<=0)?Integer.MAX_VALUE:maxIterations;
+for(int count=0;count<=max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+count--;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+count--;
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+count--;
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+count--;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+count--;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+synchronized(this){
 clusters=newClusters;
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+clusters.clear();
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6396/pattern-ver1-serial/core.src.com.FOS.Pixel.screens.GameScreen.java-checkCollectedOrbs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+newClusters.clear();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6396/pattern-ver1-serial/core.src.com.FOS.Pixel.screens.GameScreen.java-checkCollectedOrbs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+points.clear();
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+points.clear();
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+clusters.clear();
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+clusters.clear();
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+clusters.clear();
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+points.clear();
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+points.clear();
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+clusters.clear();
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+clusters.clear();
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>(count++);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+clusters.clear();
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5250/pattern-ver1-serial/src.it.rate.view.WidgetUpdate.java-updateTopUrlsList.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+return clusters;
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3513/pattern-ver1-serial/maven.cinema.src.main.java.com.mysql.MySqlFilmDao.java-getFilmAll.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 1, DEL : 1
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+return clusters;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3513/pattern-ver1-serial/maven.cinema.src.main.java.com.mysql.MySqlFilmDao.java-getFilmAll.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 1, DEL : 1
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+synchronized(this){
 assignPointsToClusters(clusters,points);
+}
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+synchronized(this){
 assignPointsToClusters(newClusters,points);
+}
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,continentName,countryCode;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
-return clusters;
+return (List<Cluster<T>>)(clusters);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=(maxIterations<0)?Integer.MAX_VALUE:-1;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/262/pattern-ver1-serial/src.main.java.com.github.ddth.djs.bo.log.TaskLogBo.java-getDurationPickup.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+while(true){
+
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0,userEmail;count<max;count++,count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+break;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+break;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+break;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+break;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+break;
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+break;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+break;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+break;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
-throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS,k,points);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/2129/pattern-ver1-serial/LimeStudio.app.src.main.java.net.toload.main.hd.keyboard.LIMEKeyboardBaseView.java-showKey.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+points.clear();
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+points.clear();
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
+points.clear();
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+points.clear();
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+points.clear();
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
+synchronized(this){
 if(!clusteringChanged){
 return clusters;
+}
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+clusters.clear();
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/488/pattern-ver1-serial/app.src.main.java.rhyme.a.is.nine.foodmanager.gui.FridgeFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+count++;
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+count++;
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
+count++;
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+count++;
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+count++;
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+count++;
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count<max;count++,Charset.forName("UTF-8")){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+clusters=new ArrayList<>();
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/486/pattern-ver1-serial/app.src.main.java.com.rubengees.vocables.pojo.Unit.java-readFromParcel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(newClusters==null){
+continue;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters==null){
+continue;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters!=null){
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+}
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4703/pattern-ver1-serial/com.zuehlke.zfb.model.src.com.zuehlke.zfb.model.chart.ChartModel.java-changed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ @SuppressWarnings("UnusedAssignment") List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+ @SuppressWarnings("UnusedAssignment") List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
- final T newCenter;
+ @SuppressWarnings("UnusedAssignment") T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ @SuppressWarnings("UnusedAssignment") List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ @SuppressWarnings("UnusedAssignment") int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
- final T newCenter;
+ @SuppressWarnings("UnusedAssignment") T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ @SuppressWarnings("UnusedAssignment") List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ @SuppressWarnings("UnusedAssignment") int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+ @SuppressWarnings("UnusedAssignment") List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
-List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+ @SuppressWarnings("UnusedAssignment") List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
-boolean clusteringChanged=false;
+ @SuppressWarnings("UnusedAssignment") boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
- final T newCenter;
+ @SuppressWarnings("UnusedAssignment") T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Collections;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
-return clusters;
+return Collections.unmodifiableList(clusters);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6159/pattern-ver1-serial/src.main.java.cz.muni.fi.xml.pools.UserXmlPool.java-getUsers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
+clusters=clusters;
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+newClusters.remove(null);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4839/pattern-ver1-serial/runtime.src.main.java.com.flipkart.flux.resource.StateMachineResource.java-getGraphData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+clusters.remove(null);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4839/pattern-ver1-serial/runtime.src.main.java.com.flipkart.flux.resource.StateMachineResource.java-getGraphData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters.isEmpty()){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters.isEmpty()){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+clusters.remove(0);
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+clusters.remove(0);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+newClusters.remove(0);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+if(clusters==null){
 clusters=newClusters;
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+int a=0;
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+int a=0;
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=((maxIterations<0))?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+String OUTSTRING="";
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+String OUTSTRING="";
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(points.isEmpty()){
+return null;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(points.isEmpty()){
+return null;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+if(clusters.isEmpty()){
+return null;
+}
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(clusters.isEmpty()){
+return null;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+int cluster=5;
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+int newCenter=5;
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+int emptyStrategy=5;
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+int LARGEST_VARIANCE=5;
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+if(newClusters!=null){
 clusters=newClusters;
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters.contains("MapDisarm")){
+continue;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/811/pattern-ver1-serial/app.src.main.java.com.disarm.sanna.pdm.SocialShareActivity.java-addSentFilesToSenderNodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(equals(points)){
+return null;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(equals(k)){
+return null;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(equals(points)){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+if(equals(maxIterations)){
+return null;
+}
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+if(equals(clusters)){
+return null;
+}
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+if(equals(clusters)){
+return null;
+}
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(equals(clusters)){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+if(equals(clusters)){
+return null;
+}
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters.isEmpty()){
+return clusters;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/5123/pattern-ver1-serial/src.main.java.org.mcstats.generator.ReflectionAggregator.java-getValues.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
+int indexSelection=0;
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+int indexSelection=0;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(points.equals("sounds")){
+continue;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters.equals("sounds")){
+continue;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+int a=1;
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+int a=1;
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+String LARGEST_VARIANCE="%#.&f";
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+boolean EMPTY_CLUSTER_IN_K_MEANS=true;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+boolean FARTHEST_POINT=true;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+boolean LARGEST_POINTS_NUMBER=true;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+boolean LARGEST_VARIANCE=true;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+boolean LocalizedFormats=true;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+boolean cluster=true;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+ final T newCenter;
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+boolean b=true;
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+boolean b=true;
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters.isEmpty()){
+return newClusters;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(points.isEmpty()){
+return newClusters;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(points==null){
+continue;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+if(clusters==null){
+continue;
+}
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+if(clusters==null){
+continue;
+}
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+if(clusters==null){
+continue;
+}
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(clusters==null){
+continue;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+for(int count=0;count<max;Math.abs(count++)){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=maxIterations<0?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/676/pattern-ver1-serial/ProjektGrupp2.src.main.java.edu.gu.maze.model.HighScore.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(points==null){
+return null;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(points==null){
+return null;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+if(clusters==null){
+return null;
+}
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+if(clusters==null){
+return null;
+}
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+if(clusters==null){
+return null;
+}
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(clusters==null){
+return null;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters==null){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters==null){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusteringChanged==false){
+return newClusters;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(points==null){
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters==null){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(newClusters==null){
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+if("&null".equals(points)){
+return null;
+}
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if("&null".equals(points)){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if("&null".equals(k)){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if("&null".equals(maxIterations)){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if("&null".equals(clusters)){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+if("&null".equals(clusters)){
+return null;
+}
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+if("&null".equals(clusters)){
+return null;
+}
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+if("&null".equals(max)){
+return null;
+}
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
+assignPointsToClusters(newClusters,points);
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+assignPointsToClusters(newClusters,points);
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+assignPointsToClusters(newClusters,points);
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+assignPointsToClusters(newClusters,points);
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+assignPointsToClusters(newClusters,points);
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+assignPointsToClusters(newClusters,points);
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+assignPointsToClusters(newClusters,points);
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+assignPointsToClusters(clusters,points);
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assignPointsToClusters(clusters,points);
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+assignPointsToClusters(clusters,points);
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+assignPointsToClusters(clusters,points);
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+assignPointsToClusters(clusters,points);
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+assignPointsToClusters(clusters,points);
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+assignPointsToClusters(clusters,points);
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+assignPointsToClusters(newClusters,points);
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+assignPointsToClusters(newClusters,points);
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+assignPointsToClusters(newClusters,points);
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+if(!clusteringChanged){
+return clusters;
+}
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+if(!clusteringChanged){
+return clusters;
+}
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+assignPointsToClusters(newClusters,points);
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+assignPointsToClusters(clusters,points);
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+assignPointsToClusters(newClusters,points);
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+assignPointsToClusters(newClusters,points);
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+clusters=newClusters;
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
-clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+clusteringChanged=true;
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+clusters=newClusters;
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
-clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+assignPointsToClusters(newClusters,points);
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+assignPointsToClusters(clusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+assignPointsToClusters(newClusters,points);
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+assignPointsToClusters(newClusters,points);
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+clusteringChanged=true;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+clusteringChanged=true;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
-clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(k<0){
+return null;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters.equals("-1")){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters.equals("-1")){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+assignPointsToClusters(clusters,points);
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
+assignPointsToClusters(newClusters,points);
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
-List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+boolean clusteringChanged=false;
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
-boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+assignPointsToClusters(newClusters,points);
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
-clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+clusteringChanged=true;
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+clusteringChanged=true;
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
-clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+clusteringChanged=true;
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+assignPointsToClusters(newClusters,points);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+assignPointsToClusters(clusters,points);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+clusteringChanged=true;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
-clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+clusteringChanged=true;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+clusteringChanged=true;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
-clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(points==null){
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+if(clusters==null){
+return null;
+}
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+if(clusters==null){
+return null;
+}
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+try{
 assignPointsToClusters(newClusters,points);
+}finally{
+clusteringChanged=true;
+}
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+assert (points!=null);
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+assert (points!=null);
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+assert (clusters!=null);
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+assert (clusters!=null);
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+assert (clusters!=null);
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+assert (clusters!=null);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assert (!points.isEmpty());
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+assert (!points.isEmpty());
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+assert (!clusters.isEmpty());
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assert (!clusters.isEmpty());
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+assert (!clusters.isEmpty());
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(points.equals(InputStream.class)){
+return clusters;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
+try{
 clusters=newClusters;
+}finally{
+assignPointsToClusters(newClusters,points);
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(points!=null){
+List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+assignPointsToClusters(clusters,points);
+ final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+for(int count=0;count<max;count++){
+boolean clusteringChanged=false;
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+for(Cluster<T> cluster : clusters){
+ final T newCenter;
+if(cluster.getPoints().isEmpty()){
+switch (emptyStrategy){
+case LARGEST_VARIANCE :
+
+newCenter=getPointFromLargestVarianceCluster(clusters);
+break;
+case LARGEST_POINTS_NUMBER :
+
+newCenter=getPointFromLargestNumberCluster(clusters);
+break;
+case FARTHEST_POINT :
+
+newCenter=getFarthestPoint(clusters);
+break;
+default :
+
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+}
+clusteringChanged=true;
+}else {
+newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
+}
+}
+newClusters.add(new Cluster<T>(newCenter));
+}
+if(!clusteringChanged){
+return clusters;
+}
+assignPointsToClusters(newClusters,points);
+clusters=newClusters;
+}
+return clusters;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(points!=null){
+boolean clusteringChanged=false;
+List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+for(Cluster<T> cluster : clusters){
+ final T newCenter;
+if(cluster.getPoints().isEmpty()){
+switch (emptyStrategy){
+case LARGEST_VARIANCE :
+
+newCenter=getPointFromLargestVarianceCluster(clusters);
+break;
+case LARGEST_POINTS_NUMBER :
+
+newCenter=getPointFromLargestNumberCluster(clusters);
+break;
+case FARTHEST_POINT :
+
+newCenter=getFarthestPoint(clusters);
+break;
+default :
+
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+}
+clusteringChanged=true;
+}else {
+newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
+}
+}
+newClusters.add(new Cluster<T>(newCenter));
+}
+if(!clusteringChanged){
+return clusters;
+}
+assignPointsToClusters(newClusters,points);
+clusters=newClusters;
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+if(clusters!=null){
+ final T newCenter;
+if(cluster.getPoints().isEmpty()){
+switch (emptyStrategy){
+case LARGEST_VARIANCE :
+
+newCenter=getPointFromLargestVarianceCluster(clusters);
+break;
+case LARGEST_POINTS_NUMBER :
+
+newCenter=getPointFromLargestNumberCluster(clusters);
+break;
+case FARTHEST_POINT :
+
+newCenter=getFarthestPoint(clusters);
+break;
+default :
+
+throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
+}
+clusteringChanged=true;
+}else {
+newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
+}
+}
+newClusters.add(new Cluster<T>(newCenter));
+}
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
+assignPointsToClusters(clusters,points);
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+assert (!clusters.isEmpty());
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+assert (clusters!=chooseInitialCenters(points,k,random));
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assert (clusteringChanged!=false);
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+assert (newClusters!=new ArrayList<Cluster<T>>());
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+assert (clusters!=null);
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assert (points!=null);
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+assert (points!=null);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+assert (clusters!=null);
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+assert (clusters!=null);
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+assert (clusters!=null);
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(newClusters.equals("655")){
+System.out.println();
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters.equals("655")){
+System.out.println();
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
+assignPointsToClusters(clusters,points);
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
-assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+assignPointsToClusters(clusters,points);
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+if(!clusteringChanged){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+newClusters.add(new Cluster<T>(newCenter));
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+newClusters.add(new Cluster<T>(newCenter));
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+newClusters.add(new Cluster<T>(newCenter));
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+newClusters.add(new Cluster<T>(newCenter));
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
+newClusters.add(new Cluster<T>(newCenter));
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+if(points.isEmpty()){
+points=null;
+}
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(points.isEmpty()){
+points=null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+if(clusters.isEmpty()){
+clusters=null;
+}
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
+if(clusters.isEmpty()){
+clusters=null;
+}
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters.isEmpty()){
+clusters=null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+newClusters.add(new Cluster<T>(newCenter));
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+newClusters.remove(newClusters.get(0));
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5778/pattern-ver1-serial/src.LinkedList.java-main.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+clusters.remove(clusters.get(0));
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5778/pattern-ver1-serial/src.LinkedList.java-main.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+newClusters.add(new Cluster<T>(newCenter));
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+assert (k>=0):"Receive a negative tratment";
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+assert (maxIterations>=0):"Receive a negative tratment";
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+clusteringChanged=true;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+clusteringChanged=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
+clusteringChanged=true;
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+clusteringChanged=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
 clusteringChanged=true;
 }
+clusteringChanged=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(points.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(points.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(points.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+if(clusters.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+if(points.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
+if(clusters.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+assert (points!=null):"Appointments day is not allowed to be null!";
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+assert (clusters!=null):"Appointments day is not allowed to be null!";
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+assert (points!=null):"Appointments day is not allowed to be null!";
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+assert (clusters!=null):"Appointments day is not allowed to be null!";
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+assert (clusters!=null):"Appointments day is not allowed to be null!";
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+assert (clusters!=null):"Appointments day is not allowed to be null!";
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+assert (k!=0):"Receive a size tratment";
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+assert (maxIterations!=0):"Receive a size tratment";
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(points.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Collections;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
+Collections.sort(clusters,Collections.reverseOrder());
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/4441/pattern-ver1-serial/recruiting-core.src.main.java.it.f2informatica.core.model.builder.ConsultantModelBuilder.java-withExperiencesIn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Collections;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
+Collections.sort(clusters,Collections.reverseOrder());
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/4441/pattern-ver1-serial/recruiting-core.src.main.java.it.f2informatica.core.model.builder.ConsultantModelBuilder.java-withExperiencesIn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Collections;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
+Collections.sort(clusters,Collections.reverseOrder());
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/4441/pattern-ver1-serial/recruiting-core.src.main.java.it.f2informatica.core.model.builder.ConsultantModelBuilder.java-withExperiencesIn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.Collections;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+Collections.sort(clusters,Collections.reverseOrder());
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/4441/pattern-ver1-serial/recruiting-core.src.main.java.it.f2informatica.core.model.builder.ConsultantModelBuilder.java-withExperiencesIn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.ArrayList;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(newClusters==null){
+newClusters=new ArrayList<>();
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
+import java.util.ArrayList;
+
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(newClusters==null){
+newClusters=new ArrayList<>();
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+if(clusteringChanged!=true){
 assignPointsToClusters(newClusters,points);
+}
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+if(clusters!=newClusters){
 assignPointsToClusters(newClusters,points);
-clusters=newClusters;
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+if(newClusters==null){
+newClusters=clusters;
+}else {
 clusters=newClusters;
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
+if(newClusters!=null){
 assignPointsToClusters(newClusters,points);
+}
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(clusters!=null&&!clusters.isEmpty()){
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+}
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7435/pattern-ver1-serial/mockserver-core.src.main.java.org.mockserver.model.NottableString.java-strings.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+List<Cluster<T>> t=clusters;
+clusters=null;
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
-return clusters;
+return t;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
-return clusters;
+List<Cluster<T>> t=clusters;
+clusters=null;
+return t;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+List<Cluster<T>> t=clusters;
+clusters=null;
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
-return clusters;
+return t;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+List<Cluster<T>> t=clusters;
+clusters=null;
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
-return clusters;
+return t;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters==null){
+throw new IllegalStateException("User isn't registered! "+points);
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters==null){
+throw new IllegalStateException("User isn't registered! "+k);
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean haveBreadCrumbs=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean haveBreadCrumbs=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
+if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
+}
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+}
 }
+if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean haveBreadCrumbs=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+haveBreadCrumbs=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
-if(!clusteringChanged){
+if(!clusteringChanged&&haveBreadCrumbs){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+if(newClusters==null||clusters==null){
+throw new NullPointerException();
+}
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
+if(newClusters==null||points==null){
+throw new NullPointerException();
+}
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(points==null||clusters==null){
+throw new NullPointerException();
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
+if(clusters==null||points==null){
+throw new NullPointerException();
+}
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(points==null||newClusters==null){
+throw new NullPointerException();
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(newClusters==null||points==null){
+throw new NullPointerException();
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean succeeded=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+succeeded=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(!succeeded){
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean succeeded=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
+succeeded=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+}
+if(!succeeded){
+return null;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean succeeded=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+succeeded=true;
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(!succeeded){
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean succeeded=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+succeeded=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(!succeeded){
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean succeeded=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
+succeeded=true;
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+}
+if(!succeeded){
+return null;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean succeeded=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+succeeded=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
+}
+if(!succeeded){
+return null;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean succeeded=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+succeeded=true;
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+}
+if(!succeeded){
+return null;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean succeeded=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+succeeded=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+}
+if(!succeeded){
+return null;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean succeeded=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
+succeeded=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
+}
+if(!succeeded){
+return null;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+if(!newCenter.equals(cluster.getCenter())){
+clusteringChanged=true;
+}
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3277/pattern-ver1-serial/core.src.main.java.org.infinispan.transaction.WriteSkewHelper.java-updateLocalModeCacheEntries.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(k==3){
+System.out.println("debug");
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+}
+if(k==3){
+System.out.println("debug");
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+if(maxIterations==3){
+System.out.println("debug");
+}
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
+}
+if(maxIterations==3){
+System.out.println("debug");
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(k==3){
+System.out.println("debug");
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+if(k==3){
+System.out.println("debug");
+}
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+if(maxIterations==3){
+System.out.println("debug");
+}
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+if(maxIterations==3){
+System.out.println("debug");
+}
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
+if(newClusters!=null){
 clusters=newClusters;
+}
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean haveBreadCrumbs=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
+haveBreadCrumbs=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean haveBreadCrumbs=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
+haveBreadCrumbs=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+boolean haveBreadCrumbs=false;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
 }
+haveBreadCrumbs=true;
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean haveBreadCrumbs=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+haveBreadCrumbs=true;
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
+boolean haveBreadCrumbs=false;
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
-if(!newCenter.equals(cluster.getCenter())){
+if(!newCenter.equals(cluster.getCenter())&&haveBreadCrumbs){
 clusteringChanged=true;
 }
+haveBreadCrumbs=true;
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
-assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(points==null||clusters==null||newClusters==null){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
+if(points==null||newClusters==null||clusters==null){
+return null;
+}
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
+long startTime=System.currentTimeMillis();
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Candidate---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
+long startTime=System.currentTimeMillis();
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
  final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:37:54 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.chooseInitialCenters:[175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 194, 164, 165, 168, 169, 171, 172, 196]#0.5773502691896258
Compute Candidate : 2019.09.06 AD at 19:38:37 CDT - 2019.09.06 AD at 20:20:11 CDT , PNumber : 11479, CandNumber : 0 
Location : org.apache.commons.math.util.MathUtils.distance:[1873, 1874, 1875, 1876, 1878]#0.5
Compute Candidate : 2019.09.06 AD at 20:20:54 CDT - 2019.09.06 AD at 20:33:26 CDT , PNumber : 11415, CandNumber : 164 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+continue;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
-double sum=0;
+ double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+return 0d;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;sum<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<=p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.Collection;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,myUid;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i>p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+break;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;i--){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=p1[1]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=p1[i]-p2[1];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+return 0;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,localLevel;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;i++,new ArrayList<KeyBinding>()){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;sum++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
-double sum=0;
+int sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final int dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,_afterComposeMethodCache;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
-double sum=0;
+float sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final float dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+i++;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.List;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,mActions;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p2.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;i++,new ArrayList<>()){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,mRelationId;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
-double sum=0;
+ double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+sum++;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+sum++;
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+i++;
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+sum++;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
+sum++;
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:37:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+sum--;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+sum--;
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+i--;
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+sum--;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
+sum--;
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=p1[i]-sum;
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=p1[i]-i;
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return FastMath.sqrt((int)(sum));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,continentName,countryCode;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:39:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+while(true){
+
+}
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0,userEmail;i<p1.length;i++,i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+i++;
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;i++,Charset.forName("UTF-8")){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=1;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=-1;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+if(dp*dp!=0){
 sum+=dp*dp;
+}
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=0;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:41:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return 1+FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+sum=sum;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return 2;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5386/pattern-ver1-serial/game.furguardians.org.pandcorps.furguardians.Level.java-getMinFlat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(i==4){
+continue;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+sum=1000;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=dp*dp*sum;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=dp*dp*i;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=dp*dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return FastMath.sqrt(sum)+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+Arrays.sort(p1);
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+Arrays.sort(p2);
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+Arrays.sort(p1);
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+Arrays.sort(p2);
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return (double)FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=sum;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=i;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return Integer.MAX_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:42:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+int a=0;
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+int a=0;
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=2;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return -FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+if(dp==0.0){
+continue;
+}
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+String OUTSTRING="";
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+String OUTSTRING="";
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;){
+i++;
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=0.0;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=1.0*dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return FastMath.sqrt(Math.abs(sum));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;Math.abs(i++)){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+int indexSelection=0;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return (double)(FastMath.sqrt(sum));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=p1[i-1]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=p1[i]-p2[i-1];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return 4;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/1673/pattern-ver1-serial/src.stratos.game.actors.Power.java-costFor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p1.equals("sounds")){
+continue;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p2.equals("sounds")){
+continue;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=sum+dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+int a=1;
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+int a=1;
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+String length="%#.&f";
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+boolean b=true;
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+boolean b=true;
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p1==null){
+continue;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p2==null){
+continue;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return FastMath.sqrt(sum)+sum;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return 0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2249/pattern-ver1-serial/app.src.main.java.rd.vehicle.MyGLSurfaceView.java-touchCenterY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=10;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=(p1[i])+p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+if(p1==null){
+return 0d;
+}
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p1==null){
+return 0d;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p2==null){
+return 0d;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if("index".equals(p1)){
+return 0;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if("index".equals(p2)){
+return 0;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+if("index".equals(sum)){
+return 0;
+}
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+if("index".equals(p1)){
+return 0;
+}
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+if("index".equals(p2)){
+return 0;
+}
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+if("index".equals(dp)){
+return 0;
+}
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+}
+if(sum<0){
+return 0d;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+assert (p1!=null);
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+assert (p2!=null);
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+assert (p1!=null);
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+assert (p2!=null);
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+if(p1.equals(InputStream.class)){
+return sum;
+}
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+if(p1!=null){
+double sum=0;
+for(int i=0;i<p1.length;i++){
+ final double dp=p1[i]-p2[i];
+sum+=dp*dp;
+}
+return FastMath.sqrt(sum);
+}
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p1!=null){
+ final double dp=p1[i]-p2[i];
+sum+=dp*dp;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p2!=null){
+ final double dp=p1[i]-p2[i];
+sum+=dp*dp;
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+if(sum==0){
+return 0d;
+}
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+}
+if(sum==0){
+return 0d;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
- final double dp=p1[i]-p2[i];
+ final double dp=(double)p1[i]-(double)p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=(double)dp*(double)dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+assert (sum!=0);
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+assert (dp!=p1[i]-p2[i]);
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+assert (p1!=null);
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+assert (p2!=null);
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+assert (p1!=null);
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+assert (p2!=null);
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
-return FastMath.sqrt(sum);
+return FastMath.sqrt(Math.max(sum,0));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
-for(int i=0;i<p1.length;i++){
+for(int i=0;i<p1.length;Math.max(i++,0)){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=(dp*dp+dp)%dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+assert (sum>=0):"Receive a negative tratment";
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+assert (dp>=0):"Receive a negative tratment";
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=-1;
+sum++;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
-sum+=dp*dp;
+sum+=-1;
 }
+sum++;
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+assert (p1!=null):"Appointments day is not allowed to be null!";
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+assert (p2!=null):"Appointments day is not allowed to be null!";
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+assert (p1!=null):"Appointments day is not allowed to be null!";
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
+assert (p2!=null):"Appointments day is not allowed to be null!";
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+assert (sum!=0):"Receive a size tratment";
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+assert (dp!=0):"Receive a size tratment";
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+}
+if(sum>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+if(sum<0){
+sum=0;
+}
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+}
+if(sum<0){
+sum=0;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+}
+if(sum<=0){
+sum=1;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p1==null||p2==null){
+throw new NullPointerException();
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(p2==null||p1==null){
+throw new NullPointerException();
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+if(p1==null||p2==null){
+throw new NullPointerException();
+}
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+if(p2==null||p1==null){
+throw new NullPointerException();
+}
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
+if(sum==3){
+System.out.println("debug");
+}
+if(sum==3){
+System.out.println("debug");
+}
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(sum==3){
+System.out.println("debug");
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+if(sum==3){
+System.out.println("debug");
+}
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+if(i==3){
+System.out.println("debug");
+}
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+if(i==3){
+System.out.println("debug");
+}
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
+if(dp==3){
+System.out.println("debug");
+}
+if(dp==3){
+System.out.println("debug");
+}
 sum+=dp*dp;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
+long startTime=System.currentTimeMillis();
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+p1[28]=(byte)0x88;
+p1[29]=0x58;
+p1[30]=0x01;
+p1[31]=0x00;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java[1865,1879]
------------Candidate---------------
 public static double distance(int[] p1,int[] p2){
 double sum=0;
 for(int i=0;i<p1.length;i++){
  final double dp=p1[i]-p2[i];
 sum+=dp*dp;
+p2[28]=(byte)0x88;
+p2[29]=0x58;
+p2[30]=0x01;
+p2[31]=0x00;
 }
 return FastMath.sqrt(sum);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:47:41 CDT
--------------- END -----------------
Location : org.apache.commons.math.util.FastMath.sqrt:[277]#0.5
Compute Candidate : 2019.09.06 AD at 20:48:30 CDT - 2019.09.06 AD at 20:52:32 CDT , PNumber : 11297, CandNumber : 19 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return Math.sqrt((int)(a));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+log(a);
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return sqrt(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return 1+Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/2193/pattern-ver1-serial/Poker.src.fr.poker.model.Carte.java-compareValue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return Math.sqrt(a)+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return (double)Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return -Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+String OUTSTRING="";
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return Math.sqrt(Math.abs(a));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return (double)(Math.sqrt(a));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+boolean b=true;
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+if("index".equals(a)){
+return 0;
+}
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+if(a<0){
+return 0d;
+}
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
-return Math.sqrt(a);
+return Math.sqrt(Math.max(a,0));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+assert (a>=0):"Receive a negative tratment";
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double sqrt(double a){
+assert (a!=0):"Receive a size tratment";
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[271,278]
------------Candidate---------------
 public static double sqrt(double a){
+if(a>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return Math.sqrt(a);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:53:36 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.Cluster.Cluster:[45, 46, 47, 48]#0.5
Compute Candidate : 2019.09.06 AD at 20:54:22 CDT - 2019.09.06 AD at 20:57:50 CDT , PNumber : 11281, CandNumber : 42 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=new ArrayList<T>(null);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=new ArrayList<T>(1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
-this.center=center;
+this.center=null;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=new ArrayList<T>(2);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=new ArrayList<T>(1000);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1052/pattern-ver1-serial/src.main.java.net.dv8tion.jda.requests.WebSocketClientV2.java-close.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+synchronized(this){
 this.center=center;
+}
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T bindingModes){
+this.center=bindingModes;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T collectorManager){
+this.center=collectorManager;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T parentFileShare){
+this.center=parentFileShare;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T pIssued){
+this.center=pIssued;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T Pin){
+this.center=Pin;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
+synchronized(this){
 points=new ArrayList<T>();
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T graphdbInput){
+this.center=graphdbInput;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T thePrescribeMedicationCntl){
+this.center=thePrescribeMedicationCntl;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 20:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T pScore){
+this.center=pScore;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T pterm){
+this.center=pterm;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T boid){
+this.center=boid;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+center=center;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
+import javafx.collections.ObservableList;
+
+import javafx.collections.FXCollections;
+
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=FXCollections.observableList(new ArrayList<T>());
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4599/pattern-ver1-serial/src.main.java.com.otakukingdom.audiobook.services.FileListService.java-FileListService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+points.add(center);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4847/pattern-ver1-serial/capsule-generation.src.main.java.org.paninij.runtime.check.Panini.java-findUnsafe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
+import java.util.Collections;
+
 public Cluster(T center){
 this.center=center;
-points=new ArrayList<T>();
+points=Collections.synchronizedList(new ArrayList<T>());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/5047/pattern-ver1-serial/core.plugins.org.csstudio.autocomplete.src.org.csstudio.autocomplete.tooltips.TooltipDataHandler.java-TooltipDataHandler.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+int a=0;
 this.center=center;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+String OUTSTRING="";
 this.center=center;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+int points=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:00:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+int a=1;
 this.center=center;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+boolean points=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+boolean b=true;
 this.center=center;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+try{
 this.center=center;
+}finally{
 points=new ArrayList<T>();
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+assert (center!=null);
 this.center=center;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
-public Cluster(T center){
-this.center=center;
+public Cluster(T r){
+center=r;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
 this.center=center;
+assert (center!=null);
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
-this.center=center;
+try{
 points=new ArrayList<T>();
+}finally{
+this.center=center;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Cluster(T center){
 this.center=center;
 points=new ArrayList<T>();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+assert (center!=null):"Appointments day is not allowed to be null!";
 this.center=center;
 points=new ArrayList<T>();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[41,48]
------------Candidate---------------
 public Cluster(T center){
+long startTime=System.currentTimeMillis();
 this.center=center;
 points=new ArrayList<T>();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:01:42 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.Cluster.addPoint:[55, 56]#0.5
Compute Candidate : 2019.09.06 AD at 21:02:28 CDT - 2019.09.06 AD at 21:05:29 CDT , PNumber : 11420, CandNumber : 47 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
-points.add(point);
+points.add(1,point);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
-points.add(point);
+points.remove(point);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3908/pattern-ver1-serial/src.main.java.me.ferrybig.javacoding.minecraft.minigame.listener.CombinedListener.java-removeListener.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
-points.add(point);
+this.points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+synchronized(points){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+addPoint(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+synchronized(this){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(equals(point)){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+if(point==null){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(point==null){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:07:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(points!=null){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(points!=point){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(point!=null){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(points==null){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if("index".equals(point)){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(point.equals("TIME")){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+if("&null".equals(point)){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void addPoint(T point){
 points.add(point);
+if(point.equals("DATETIME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+point=point;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+int a=0;
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+String OUTSTRING="";
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+int points=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(points.contains(point)){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+int a=1;
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+boolean points=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+boolean b=true;
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(points.size()>0){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(!points.contains(point)){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(!point.equals("")){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+assert (point!=null);
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(point!=null){
+points.add(point);
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void addPoint(T point){
+if(point.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+assert (point!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+if(point.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void addPoint(T point){
 points.add(point);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void addPoint(T point){
 points.add(point);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+assert (point!=null):"Appointments day is not allowed to be null!";
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(points==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(point==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 points.add(point);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+if(point.equals("CALL_RECEIVED_AT")){
+return ;
+}
 points.add(point);
+if(point.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
 points.add(point);
+if(point.equals("INFO")){
+return ;
+}
+if(point.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+for(int i=0;i<24;i++){
 points.add(point);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[50,56]
------------Candidate---------------
 public void addPoint(T point){
+long startTime=System.currentTimeMillis();
 points.add(point);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:09:39 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.Cluster.getCenter:[71]#0.5
Compute Candidate : 2019.09.06 AD at 21:10:16 CDT - 2019.09.06 AD at 21:12:54 CDT , PNumber : 11279, CandNumber : 9 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
-return center;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
-return center;
+return this.center;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
-return center;
+return this.getCenter();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
+this.getCenter();
 return center;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
-return center;
+return (T)(center);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
+int a=0;
 return center;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
+String OUTSTRING="";
 return center;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
+int a=1;
 return center;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java[66,72]
------------Candidate---------------
 public T getCenter(){
+boolean b=true;
 return center;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:13:18 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.KMeansPlusPlusClusterer:[78, 79, 80, 81]#0.5
Compute Candidate : 2019.09.06 AD at 21:13:59 CDT - 2019.09.06 AD at 21:17:38 CDT , PNumber : 11280, CandNumber : 50 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+this.random=null;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+synchronized(this){
 this.random=random;
+}
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
+synchronized(this){
 this.emptyStrategy=emptyStrategy;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random bindingModes,EmptyClusterStrategy emptyStrategy){
+this.random=bindingModes;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy bindingModes){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random collectorManager,EmptyClusterStrategy emptyStrategy){
+this.random=collectorManager;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy collectorManager){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random parentFileShare,EmptyClusterStrategy emptyStrategy){
+this.random=parentFileShare;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy parentFileShare){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random pIssued,EmptyClusterStrategy emptyStrategy){
+this.random=pIssued;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy pIssued){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random Pin,EmptyClusterStrategy emptyStrategy){
+this.random=Pin;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy Pin){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random graphdbInput,EmptyClusterStrategy emptyStrategy){
+this.random=graphdbInput;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy graphdbInput){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random thePrescribeMedicationCntl,EmptyClusterStrategy emptyStrategy){
+this.random=thePrescribeMedicationCntl;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy thePrescribeMedicationCntl){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random pScore,EmptyClusterStrategy emptyStrategy){
+this.random=pScore;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy pScore){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random pterm,EmptyClusterStrategy emptyStrategy){
+this.random=pterm;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy pterm){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random boid,EmptyClusterStrategy emptyStrategy){
+this.random=boid;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy boid){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+this.emptyStrategy=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+random=random;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+int a=0;
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+String OUTSTRING="";
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+int a=1;
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+boolean b=true;
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+assert (random!=null);
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+assert (emptyStrategy!=null);
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+public KMeansPlusPlusClusterer(Random r,EmptyClusterStrategy emptyStrategy){
+random=r;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
-public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy r){
 this.random=random;
-this.emptyStrategy=emptyStrategy;
+emptyStrategy=r;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
+assert (random!=null);
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
+assert (emptyStrategy!=null);
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
-this.random=random;
+try{
 this.emptyStrategy=emptyStrategy;
+}finally{
+this.random=random;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+try{
 this.random=random;
+}finally{
 this.emptyStrategy=emptyStrategy;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+assert (random!=null):"Appointments day is not allowed to be null!";
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+assert (emptyStrategy!=null):"Appointments day is not allowed to be null!";
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+if(random==null||emptyStrategy==null){
+throw new NullPointerException();
+}
 this.random=random;
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
 this.random=random;
+if(emptyStrategy==null||random==null){
+throw new NullPointerException();
+}
 this.emptyStrategy=emptyStrategy;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[72,81]
------------Candidate---------------
 public KMeansPlusPlusClusterer(Random random,EmptyClusterStrategy emptyStrategy){
+long startTime=System.currentTimeMillis();
 this.random=random;
 this.emptyStrategy=emptyStrategy;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 21:22:02 CDT
--------------- END -----------------
Location : org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters:[146, 147, 148, 149, 150]#0.5
Compute Candidate : 2019.09.06 AD at 21:22:45 CDT - 2019.09.06 AD at 21:30:49 CDT , PNumber : 11283, CandNumber : 0 
Finish : math-57 > patch : 2 | Start : Fri Sep 06 17:55:26 CDT 2019 | End : 2019.09.06 AD at 21:30:49 CDT
