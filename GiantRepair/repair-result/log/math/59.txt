Repair : math_59
Current failed test : org.apache.commons.math.util.FastMathTest::testMinMaxFloat | 2019.09.06 AD at 21:30:49 CDT
Location : org.apache.commons.math.util.FastMath.min:[3446]#1.0
Compute Candidate : 2019.09.06 AD at 21:40:20 CDT - 2019.09.06 AD at 21:46:47 CDT , PNumber : 11427, CandNumber : 27 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return (a<=b)?a:(Float.isNaN(a+a)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+log(a);
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+log(b);
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return ((a<=b))?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+String OUTSTRING="";
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+float NaN=8;
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+String NaN="%#.&f";
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if("index".equals(a)){
+return 0;
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if("index".equals(b)){
+return 0;
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if(a<0){
+return 0f;
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if(b<0){
+return 0f;
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return (a<=b)?a:((Float.isNaN(a+b))?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+assert (a>=0):"Receive a negative tratment";
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+assert (b>=0):"Receive a negative tratment";
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static float min(float a,float b){
+assert (a!=0):"Receive a size tratment";
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static float min(float a,float b){
+assert (b!=0):"Receive a size tratment";
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if(a>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if(b>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if(a<0){
+return 0;
+}
+if(a>=b){
+return b-1;
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
+if(b<0){
+return 0;
+}
+if(b>=a){
+return a-1;
+}
 return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return a;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return (float)((a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return a+((a<=b)?0:(Float.isNaN(a+b)?Float.NaN:b));
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2793/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.state.filesystem.FsCheckpointStreamFactory.java-getPos.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3440,3447]
------------Candidate---------------
 public static float min(float a,float b){
-return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);
+return (float)Math.sqrt(a+b);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/4236/pattern-ver1-serial/app.src.main.java.com.bq.robotic.robopad_plusplus.utils.ScaleImageView.java-distance.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:48:21 CDT
--------------- END -----------------
Location : org.apache.commons.math.util.FastMath.max:[3482]#1.0
Compute Candidate : 2019.09.06 AD at 21:48:57 CDT - 2019.09.06 AD at 21:56:23 CDT , PNumber : 11427, CandNumber : 27 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return (a<=b)?b:(Float.isNaN(a+a)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+log(a);
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+log(b);
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return ((a<=b))?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+String OUTSTRING="";
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+float NaN=8;
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+String NaN="%#.&f";
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if("index".equals(a)){
+return 0;
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if("index".equals(b)){
+return 0;
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if(a<0){
+return 0f;
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if(b<0){
+return 0f;
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return (a<=b)?b:((Float.isNaN(a+b))?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+assert (a>=0):"Receive a negative tratment";
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+assert (b>=0):"Receive a negative tratment";
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static float max(float a,float b){
+assert (a!=0):"Receive a size tratment";
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static float max(float a,float b){
+assert (b!=0):"Receive a size tratment";
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if(a>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if(b>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if(b<0){
+return 0;
+}
+if(b>=a){
+return a-1;
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
+if(a<0){
+return 0;
+}
+if(a>=b){
+return b-1;
+}
 return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return a;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return (float)((a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return b+((a<=b)?0:(Float.isNaN(a+b)?Float.NaN:b));
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2793/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.state.filesystem.FsCheckpointStreamFactory.java-getPos.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java[3476,3483]
------------Candidate---------------
 public static float max(float a,float b){
-return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);
+return (float)Math.sqrt(a+b);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/4236/pattern-ver1-serial/app.src.main.java.com.bq.robotic.robopad_plusplus.utils.ScaleImageView.java-distance.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 21:57:57 CDT
--------------- END -----------------
Location : org.apache.commons.math.random.MersenneTwister.MersenneTwister:[131, 132, 133, 134]#0.18569533817705186
Compute Candidate : 2019.09.06 AD at 21:58:38 CDT - 2019.09.06 AD at 22:06:54 CDT , PNumber : 11270, CandNumber : 43 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
-mt=new int[N];
+mt=new int[(N)];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:06:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
-mt=new int[N];
+mt=null;
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+seed++;
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+seed++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+seed--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+seed--;
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+synchronized(this){
 mt=new int[N];
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+synchronized(this){
 setSeed(seed);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:07:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+seed=seed;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+if(mt==null){
 mt=new int[N];
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+int a=0;
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+String OUTSTRING="";
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+try{
 mt=new int[N];
+}finally{
 setSeed(seed);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+int mt=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+int N=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+int N=8;
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+if(equals(seed)){
+return ;
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
-setSeed(seed);
+setSeed(seed/2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3673/pattern-ver1-serial/src.com.tomclaw.mandarin.mmp.MmpSession.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+int a=1;
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+boolean N=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+boolean mt=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+boolean b=true;
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
-setSeed(seed);
+setSeed(seed&0xff);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/4742/pattern-ver1-serial/src.uk.ac.herts.SmartLab.XBee.Response.XBeeRx16Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+if(seed<0){
+return ;
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
-mt=new int[N];
+try{
 setSeed(seed);
+}finally{
+mt=new int[N];
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+if((Thread.currentThread().interrupted())){
+return ;
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+assert (seed>=0):"Receive a negative tratment";
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public MersenneTwister(long seed){
 mt=new int[N];
 setSeed(seed);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+if(mt==null){
 mt=new int[N];
-setSeed(seed);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+if(mt!=null){
 mt=new int[N];
-setSeed(seed);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public MersenneTwister(long seed){
+assert (seed!=0):"Receive a size tratment";
 mt=new int[N];
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+if(seed>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
-mt=new int[N];
+if(mt!=new int[N]){
 setSeed(seed);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+if(seed==3){
+System.out.println("debug");
+}
 mt=new int[N];
 setSeed(seed);
+if(seed==3){
+System.out.println("debug");
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
 mt=new int[N];
+for(int i=0;i<24;i++){
 setSeed(seed);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+for(int i=0;i<24;i++){
 mt=new int[N];
+}
 setSeed(seed);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/random/MersenneTwister.java[128,134]
------------Candidate---------------
 public MersenneTwister(long seed){
+long startTime=System.currentTimeMillis();
 mt=new int[N];
 setSeed(seed);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:11:01 CDT
--------------- END -----------------
Location : org.apache.commons.math.dfp.Dfp.Dfp:[202, 203]#0.18569533817705186
Compute Candidate : 2019.09.06 AD at 22:11:39 CDT - 2019.09.06 AD at 22:20:29 CDT , PNumber : 11265, CandNumber : 13 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:20:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+x++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+x--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+field=field;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+x=x;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+assert (field!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[197,203]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,int x){
 this(field,(long)x);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:23:09 CDT
--------------- END -----------------
Location : org.apache.commons.math.dfp.Dfp.Dfp:[209, 212, 213, 214, 216, 217, 225, 229, 232, 233, 234, 235, 236, 237, 240, 250]#0.18569533817705186
Compute Candidate : 2019.09.06 AD at 22:23:46 CDT - 2019.09.06 AD at 22:54:34 CDT , PNumber : 11392, CandNumber : 14 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
+synchronized(this){
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
 mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
+}
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
+if(0!=0){
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
 mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
+}
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
+mant[1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
+mant[exp]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
+mant[0]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
+mant[2]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
-nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
+if(nans!=FINITE){
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
 mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
+}
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
-mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
+if(mant!=new int[field.getRadixDigits()]){
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
 mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
+}
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
+mant[mant.length-1]=(int)(x%RADIX);
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
+mant[mant.length-1]=(int)(x%RADIX);
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
+mant[mant.length-1]=(int)(x%RADIX);
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
+mant[mant.length-1]=(int)(x%RADIX);
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
+mant[mant.length-1]=(int)(x%RADIX);
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
-mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[205,250]
------------Candidate---------------
 protected Dfp(DfpField field,long x){
 mant=new int[field.getRadixDigits()];
 nans=FINITE;
 this.field=field;
 boolean isLongMin=false;
 if(x==Long.MIN_VALUE){
 isLongMin=true;
 ++x;
 }
 if(x<0){
 sign=-1;
 x=-x;
 }else {
 sign=1;
 }
+try{
 exp=0;
 while(x!=0){
 System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
 mant[mant.length-1]=(int)(x%RADIX);
 x/=RADIX;
 exp++;
+}
+}finally{
+System.arraycopy(mant,mant.length-exp,mant,mant.length-1-exp,exp);
 }
 if(isLongMin){
 for(int i=0;i<mant.length-1;i++){
 if(mant[i]!=0){
 mant[i]++;
 break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 1, INS : 0, DEL : 13
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.06 AD at 22:55:23 CDT
--------------- END -----------------
Location : org.apache.commons.math.dfp.Dfp.Dfp:[330, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 351, 357, 364, 365, 366, 370, 371, 393, 397, 402, 405, 407, 408, 411, 412, 415, 416, 419, 421, 427, 428, 429, 430, 431, 432, 434, 435, 439, 440, 443, 444, 445, 446, 447, 450, 455, 456, 457, 458, 463, 465, 466, 469, 470, 478, 483, 488, 489, 491, 492, 493, 494, 501, 502, 503, 506, 507, 508, 514, 515, 519, 523, 525, 527, 530]#0.18569533817705186
Compute Candidate : 2019.09.06 AD at 22:56:08 CDT - 2019.09.07 AD at 01:25:26 CDT , PNumber : 7458, CandNumber : 1001 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
+continue;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
- final int rsize=4;
+ int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
-boolean decimalFound=false;
+ boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
- final int offset=4;
+ int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
-int sciexp=0;
+ int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
-int decimalPos=0;
+ int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+ int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
-int q=offset;
+ int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
-int significantDigits=0;
+ int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p>1){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>1){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==0){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)==0){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==0){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==0){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]==0){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p>=q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>='9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=1;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=1;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=1;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=1;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=1;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+return ;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
+return ;
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+return ;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
+return ;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
+return ;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;sign<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;exp<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;nans<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;p<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
-int trailingZeros=0;
+long trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-1-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-sciexp%rsize)%1;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=0;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=0;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=0;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<=rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<=striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<=(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<='0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+i=mant.length-1;
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
+p=significantDigits-1+offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
+p=0;
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
+q=offset;
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
+i=0;
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+mant=new int[field.getRadixDigits()];
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
+decimalPos+=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+q-=i;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
+mant=new int[field.getRadixDigits()];
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
+mant=new int[field.getRadixDigits()];
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<=2){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/3732/pattern-ver1-serial/reformulation-core.src.main.java.org.semanticweb.ontop.owlrefplatform.core.unfolding.TypeLift.java-f.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equalsIgnoreCase(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equalsIgnoreCase(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equalsIgnoreCase(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i>=2;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/6961/pattern-ver1-serial/src.Actions.FailedGuessAction.java-FailedGuessAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>=2&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/6961/pattern-ver1-serial/src.Actions.FailedGuessAction.java-FailedGuessAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'&&fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p>3){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>3){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-sciexp%rsize)%2;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/3321/pattern-ver1-serial/src.core.lombok.core.Version.java-isEdgeRelease.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-sciexp%2)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/3321/pattern-ver1-serial/src.core.lombok.core.Version.java-isEdgeRelease.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+int p=s.indexOf("e",0);
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=s.indexOf("E",0);
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-",0)!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
-int trailingZeros=0;
+double trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q>striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i>rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)>(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)>'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i>0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
+break;
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p==-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")==-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
-if(decimalFound&&q!=offset){
+if(decimalFound&&q==offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p]=='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=rsize-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
-decimalPos=q-offset;
+decimalPos=p-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=p-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=offset-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=2;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=2;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
-decimalPos+=i;
+decimalPos+=2;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
-q+=4;
+q+=2;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=2;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=2;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits<=0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p<=-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p<=fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p<=(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q<=offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q<=mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)<='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)<='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)<='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]<='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
-int trailingZeros=0;
+float trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=3;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=3;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=3;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=3;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=3;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=3;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*rsize-offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize-offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q-1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q-2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q-3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset-1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=(decimalPos-sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=significantDigits-1-offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=(decimalPos+sciexp)-rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
+break;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2027/pattern-ver1-serial/cong.Internet.BRITE.src.org.cong.complexNetwork.model.AB.java-getTargetNode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
+break;
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2027/pattern-ver1-serial/cong.Internet.BRITE.src.org.cong.complexNetwork.model.AB.java-getTargetNode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>'1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2013/pattern-ver1-serial/src.main.java.mousio.client.retry.RetryWithExponentialBackOff.java-shouldRetry.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
-q++;
+q--;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
-significantDigits++;
+significantDigits--;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
-trailingZeros++;
+trailingZeros--;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
-p++;
+p--;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
-p++;
+p--;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
-p++;
+p--;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
-p++;
+p--;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<rsize;i--){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
+break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/4872/pattern-ver1-serial/src.com.spicenu.qbii.controller.JoController.java-checkCollisionWithWalls.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+sign+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+exp+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+nans+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+decimalPos+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+rsize+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+p+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i>=5;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1455/pattern-ver1-serial/NumbersFlow.src.com.braingames.sdk.numbersflow.ScoreDatabase.java-getFirstFiveScores.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>=5&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1455/pattern-ver1-serial/NumbersFlow.src.com.braingames.sdk.numbersflow.ScoreDatabase.java-getFirstFiveScores.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<4;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<4){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<4||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p>=-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p>=fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q>=offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p>=(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits>=0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q>=mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)>='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)>='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)>='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]>='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p!=q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)!='9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:37:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p<q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5482/pattern-ver1-serial/src.main.java.capstat.model.Match.java-calculateStartingPlayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+1]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+1+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*1+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
-striped[0]='0';
+striped[1]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
-striped[2]='0';
+striped[1]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
-striped[3]='0';
+striped[1]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[1]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[1]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[1]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[1]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[1]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
-round((striped[q]-'0')*1000);
+round((striped[1]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p!=-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q!=mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:38:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p!=fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p!=(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q!=offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits!=0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)!='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)!='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)!='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]!='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
- final int rsize=4;
+ final Integer rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
- final int offset=4;
+ final Integer offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
-int sciexp=0;
+Integer sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+Integer p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
-int decimalPos=0;
+Integer decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
-int q=offset;
+Integer q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
-int significantDigits=0;
+Integer significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
-int trailingZeros=0;
+Integer trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+Integer i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+3]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+3]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=(decimalPos+3)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=(decimalPos+sciexp)/3;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+3+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+3){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<3){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/3819/pattern-ver1-serial/BootPrepWeb.src.controllers.UserController.java-validInputs.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<3;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/3819/pattern-ver1-serial/BootPrepWeb.src.controllers.UserController.java-validInputs.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<3||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/3819/pattern-ver1-serial/BootPrepWeb.src.controllers.UserController.java-validInputs.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-2;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=significantDigits-2+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-2-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*2+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*rsize+2*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[2*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==2*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((2*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<(2*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
-striped[1]='0';
+striped[0]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
-striped[2]='0';
+striped[0]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
-striped[3]='0';
+striped[0]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[0]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[0]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[0]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[0]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[0]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p<-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")<-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
-if(decimalFound&&q!=offset){
+if(decimalFound&&q<offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p]<'0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p==q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6762/pattern-ver1-serial/metastore.src.java.org.apache.hadoop.hive.metastore.hbase.HBaseFilterPlanUtil.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=10;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=10;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=10;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=10;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=10;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=10;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
-striped[1]='0';
+striped[2]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:43:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
-striped[0]='0';
+striped[2]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[2]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
-striped[3]='0';
+striped[2]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[2]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[2]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[2]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[2]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<5||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5490/pattern-ver1-serial/Paintroid.src.org.catrobat.paintroid.dialog.layerchooser.LayerChooserDialog.java-addLayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<5;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5490/pattern-ver1-serial/Paintroid.src.org.catrobat.paintroid.dialog.layerchooser.LayerChooserDialog.java-addLayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<5){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5490/pattern-ver1-serial/Paintroid.src.org.catrobat.paintroid.dialog.layerchooser.LayerChooserDialog.java-addLayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<'9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3196/pattern-ver1-serial/src.game.Game.java-dealerTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
-decimalFound=true;
+decimalFound=decimalFound;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/1892/pattern-ver1-serial/toolbelt.src.main.java.com.simplifyops.toolbelt.ToolBelt.java-ansiColorOutput.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
-decimalFound=true;
+decimalFound=decimalFound;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/1892/pattern-ver1-serial/toolbelt.src.main.java.com.simplifyops.toolbelt.ToolBelt.java-ansiColorOutput.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits>0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p>-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p>fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p>(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q>mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q>offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)>'0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)>'.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)>'.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]>'0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-1)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)==4){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==4){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==4){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==4){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits==4){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]==4){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p>-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")>-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
-if(decimalFound&&q!=offset){
+if(decimalFound&&q>offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p]>'0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
-String fpexp=s.substring(p+1);
+String fpexp=s.substring(p,p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2403/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.Indexer.java-getFrame.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<20;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/2783/pattern-ver1-serial/app.src.main.java.EV3.BluetoothRobot.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<20){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/2783/pattern-ver1-serial/app.src.main.java.EV3.BluetoothRobot.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<20||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/2783/pattern-ver1-serial/app.src.main.java.EV3.BluetoothRobot.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=2;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=2;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.startsWith(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/797/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.scoreboard.VariableReplacer.java-getFactionsValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.startsWith(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/797/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.scoreboard.VariableReplacer.java-getFactionsValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.startsWith(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/797/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.scoreboard.VariableReplacer.java-getFactionsValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=(decimalPos+sciexp)/4;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=100;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=100;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=100;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=100;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=100;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=100;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i>=0.0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>=0.0&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.contains(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/1219/pattern-ver1-serial/src.lisong_mechlab.view.render.StyleManager.java-getBgColorFor.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.contains(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/1219/pattern-ver1-serial/src.lisong_mechlab.view.render.StyleManager.java-getBgColorFor.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.contains(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/1219/pattern-ver1-serial/src.lisong_mechlab.view.render.StyleManager.java-getBgColorFor.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i<=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)<='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:48:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)==5){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==5){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==5){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==5){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits==5){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]==5){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*rsize+20*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[20*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==20*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((20*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<(20*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=1000;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=1000;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=1000;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=1000;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=1000;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)>='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6682/pattern-ver1-serial/src.Geometry.Graham_Scan.java-leftTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:51:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p<=q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4868/pattern-ver1-serial/src.main.java.com.offbynull.portmapper.pcp.messages.PcpResponse.java-dump.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(getRadixDigits())];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(rsize)];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(offset)];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(2)];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal="";
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-4-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-4;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-sciexp%rsize)%4;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+int p=s.lastIndexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=s.lastIndexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.lastIndexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal=null;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
-this.field=field;
+this.field=null;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+int p=s.indexOf("e",2);
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=s.indexOf("E",2);
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-",2)!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[sign]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[exp]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[sciexp]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[decimalPos]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[rsize]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[significantDigits]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=4;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=4;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=4;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=4;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=4;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=4;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-2){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p!=-2){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")!=-2){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*2+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*2+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+2+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+2){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*2)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<(mant.length*2)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
-q+=4;
+q+=100;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1004/pattern-ver1-serial/AnthenaPC.src.entity.Character.java-increaseSpeed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:55:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
-decimalPos+=i;
+decimalPos+=100;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1004/pattern-ver1-serial/AnthenaPC.src.entity.Character.java-increaseSpeed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==9){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits==9){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)==9){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==9){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==9){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]==9){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=5;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=5;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=5;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=5;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=5;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=5;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
-decimalPos--;
+decimalPos++;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
-q--;
+q++;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
-significantDigits--;
+significantDigits++;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i>=0;i++){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
-p--;
+p++;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==0){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==0){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==0){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
+exp=-1;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
+sign=-1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
+p=-1;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=-1;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=-1;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=-1;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
- final String fpdecimal;
+ String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
-boolean decimalFound=false;
+ boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
- final int rsize=4;
+ int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
- final int offset=4;
+ int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
-int sciexp=0;
+ int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
-int decimalPos=0;
+ int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
-int significantDigits=0;
+ int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
-int trailingZeros=0;
+ int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
- final String fpdecimal;
+ String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals(POS_INFINITY_STRING.trim())){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals(NEG_INFINITY_STRING.trim())){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 01:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING.trim())){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+int p=s.indexOf("e".trim());
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=s.indexOf("E".trim());
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-".trim())!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equalsIgnoreCase(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equalsIgnoreCase(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/1250/pattern-ver1-serial/SixLixAssembler.java-updateProgramCounter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equalsIgnoreCase(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equalsIgnoreCase(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/1250/pattern-ver1-serial/SixLixAssembler.java-updateProgramCounter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equalsIgnoreCase(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equalsIgnoreCase(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/1250/pattern-ver1-serial/SixLixAssembler.java-updateProgramCounter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal=s.trim();
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/7448/pattern-ver1-serial/DODO.src.Parser.Parser.java-setAddAttributes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==-1){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==-1){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==-1){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits==-1){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)==-1){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==-1){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)==-1){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
-if(striped[q]=='0'){
+if(striped[q]==-1){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+sciexp++;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+decimalPos++;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+significantDigits++;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
+trailingZeros++;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
+sciexp++;
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
+sciexp++;
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
+sciexp++;
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
+sciexp++;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
+q++;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+p++;
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+i++;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+sciexp++;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
+sciexp++;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
+sciexp++;
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
-if(!decimalFound){
+if(true){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
+sciexp++;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
+sciexp++;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
+sciexp++;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
+sciexp++;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+sciexp--;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
+q--;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+decimalPos--;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+significantDigits--;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
+trailingZeros--;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+p--;
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+i--;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
-for(int i=0;i<fpexp.length();i++){
+for(int i=0;i<=fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<=rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
-for(i=0;i<rsize;i++){
+for(i=0;i<=rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<=striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
-for(int i=0;i<fpexp.length();i++){
+for(int i=0;i<=fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<=striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
+i++;
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+i++;
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
-if(!decimalFound){
+if(decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
+decimalPos++;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3681/pattern-ver1-serial/src.main.java.halo.query.Query.java-buildArgs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
+synchronized(this){
 fpdecimal=s;
+}
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
+synchronized(this){
 this.field=field;
+}
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
+synchronized(this){
 q=offset;
+}
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+synchronized(this){
 q-=i;
+}
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
+synchronized(this){
 decimalPos+=i;
+}
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
+synchronized(this){
 decimalPos=significantDigits;
+}
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[q++]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q++]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
-round((striped[q]-'0')*1000);
+round((striped[q++]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p++]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==4){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==4){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==4){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+this.mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2698/pattern-ver1-serial/Ant.src.main.graphics.cells.Cells.java-setCell.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+synchronized(this){
 mant=new int[field.getRadixDigits()];
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+synchronized(this){
 exp=(decimalPos+sciexp)/rsize;
+}
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
+synchronized(this){
 nans=FINITE;
+}
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==5){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==5){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==5){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
+mant=new int[(field.getRadixDigits())];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
-sciexp=-sciexp;
+sciexp=sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3957/pattern-ver1-serial/src.com.medha.imagesearch.ImageSearchActivity.java-loadMore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal=s.toUpperCase();
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4456/pattern-ver1-serial/src.main.java.com.codegen.model.ColumnDefinition.java-setDbColumnIdentifier.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
+mant=null;
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+synchronized(this){
 sign=1;
+}
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/catalog.core.catalog-core-standardframework.src.main.java.ddf.catalog.cache.impl.ProductCacheDirListener.java-setHazelcastInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+synchronized(this){
 exp=0;
+}
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/catalog.core.catalog-core-standardframework.src.main.java.ddf.catalog.cache.impl.ProductCacheDirListener.java-setHazelcastInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
-for(;;){
+for(sciexp++;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
-for(;;){
+for(;;sciexp++){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals((POS_INFINITY_STRING).toLowerCase())){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals((NAN_STRING).toLowerCase())){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals((NEG_INFINITY_STRING).toLowerCase())){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+int p=s.indexOf(("e").toLowerCase());
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=s.indexOf(("E").toLowerCase());
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf(("-").toLowerCase())!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==9){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==9){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==9){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(s.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==s.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=1;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=-1;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-1)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
+synchronized(this){
 break;
+}
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
+synchronized(this){
 decimalFound=true;
+}
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
+synchronized(this){
 break;
+}
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+synchronized(this){
 break;
+}
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
+synchronized(this){
 decimalPos--;
+}
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
+synchronized(this){
 break;
+}
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(!s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(!s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(!s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=0;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=0;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+if((decimalPos+sciexp)/rsize!=0){
 exp=(decimalPos+sciexp)/rsize;
+}
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+if(1!=0){
 sign=1;
+}
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+if(0!=0){
 exp=0;
+}
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-2)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/3321/pattern-ver1-serial/src.core.lombok.core.Version.java-isEdgeRelease.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==fpdecimal.length()*100){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<mant.length*rsize*100){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=(rsize*100*100-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while(p-q*100<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=decimalPos+sciexp*100/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[q-1]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
-String fpexp=s.substring(p+1);
+ @SuppressWarnings("UnusedAssignment") String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
- final String fpdecimal;
+ @SuppressWarnings("UnusedAssignment") String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
-boolean decimalFound=false;
+ @SuppressWarnings("UnusedAssignment") boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
- final int rsize=4;
+ @SuppressWarnings("UnusedAssignment") int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
- final String fpdecimal;
+ @SuppressWarnings("UnusedAssignment") String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
-String fpexp=s.substring(p+1);
+ @SuppressWarnings("UnusedAssignment") String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+ @SuppressWarnings("UnusedAssignment") int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
- final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") int offset=4;
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
-int sciexp=0;
+ @SuppressWarnings("UnusedAssignment") int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ @SuppressWarnings("UnusedAssignment") char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
-int decimalPos=0;
+ @SuppressWarnings("UnusedAssignment") int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
-boolean decimalFound=false;
+ @SuppressWarnings("UnusedAssignment") boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
-int p=s.indexOf("e");
+ @SuppressWarnings("UnusedAssignment") int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
- final String fpdecimal;
+ @SuppressWarnings("UnusedAssignment") String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=2;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=2;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+s=s;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=3;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=3;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits+rsize==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits+offset==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits+p==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits+sciexp==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&rsize=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&offset=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&p=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
+q--;
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<4){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
+if(s!=null){
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
+}
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal=s+": ";
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/1370/pattern-ver1-serial/src.main.java.net.jeebiss.spazz.Spazz.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*rsize+1];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*rsize+3];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(true){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(true){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(true){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(true){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&decimalFound){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<3){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/3819/pattern-ver1-serial/BootPrepWeb.src.controllers.UserController.java-validInputs.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)==false){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals(POS_INFINITY_STRING)==false){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals(NEG_INFINITY_STRING)==false){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+Arrays.sort(striped);
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+Arrays.sort(mant);
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
+Arrays.sort(mant);
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+if(mant==null){
 mant=new int[field.getRadixDigits()];
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
+if(NAN_STRING!=null){
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
+}
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(POS_INFINITY_STRING!=null){
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
+}
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
+if(NEG_INFINITY_STRING!=null){
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
+}
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[2+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==2+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=(2-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[0]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=10;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=10;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[2]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<5){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5490/pattern-ver1-serial/Paintroid.src.org.catrobat.paintroid.dialog.layerchooser.LayerChooserDialog.java-addLayer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+int a=0;
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
+int a=0;
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+int a=0;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
+int a=0;
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
+int a=0;
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
+int a=0;
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
+int a=0;
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+int a=0;
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
+int a=0;
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
+int a=0;
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+decimalFound=true;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
-decimalFound=true;
+decimalFound=false;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+decimalFound=true;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
-decimalFound=true;
+decimalFound=false;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
+decimalFound=true;
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
-decimalFound=true;
+decimalFound=false;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
+decimalFound=true;
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
-decimalFound=true;
+decimalFound=false;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<20){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/2783/pattern-ver1-serial/app.src.main.java.EV3.BluetoothRobot.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(NAN_STRING!=null){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(POS_INFINITY_STRING!=null){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(NEG_INFINITY_STRING!=null){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+String OUTSTRING="";
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+String OUTSTRING="";
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+String OUTSTRING="";
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
+String OUTSTRING="";
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
+String OUTSTRING="";
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
+String OUTSTRING="";
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
+String OUTSTRING="";
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
+String OUTSTRING="";
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
+String OUTSTRING="";
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+String OUTSTRING="";
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(this.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(this.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(this.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=100;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=100;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(true){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/1657/pattern-ver1-serial/reversi.src.main.java.org.kratos.reversi.application.View.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p!=0){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p!=0){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+if(s.isEmpty()){
+return ;
+}
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[20+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==20+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=(20-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=mant.length-1;i>=12*3600000;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/459/pattern-ver1-serial/app.src.main.java.com.example.android.sunshine.app.sync.SunshineSyncAdapter.java-notifyWeather.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>=12*3600000&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/459/pattern-ver1-serial/app.src.main.java.com.example.android.sunshine.app.sync.SunshineSyncAdapter.java-notifyWeather.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=1000;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=1000;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
+int sign=5;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
+int exp=5;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
+int nans=5;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
+int FINITE=5;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(getRadixDigits()*rsize)];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(offset*2)];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
-decimalPos=q-offset;
+decimalPos=q;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3957/pattern-ver1-serial/src.com.medha.imagesearch.ImageSearchActivity.java-loadMore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=((rsize*100)-decimalPos-4)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=4;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=4;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
-nans=FINITE;
+nans=FINITE&0xff;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1189/pattern-ver1-serial/src.main.java.org.dragonet.utilities.io.PEBinaryUtils.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[getRadixDigits()*rsize+2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/6068/pattern-ver1-serial/core.src.com.blogspot.ludumdaresforfun.MainScreen.java-activateBoss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(Double.isNaN(q)){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
-p=s.indexOf("E");
+p=5;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
-for(i=mant.length-1;i>=0;i--){
+for(i=5;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals(POS_INFINITY_STRING)==true){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)==true){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals(NEG_INFINITY_STRING)==true){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(striped==null){
+return ;
+}
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(fpdecimal==null){
+return ;
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(fpdecimal==null){
+return ;
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
+return ;
+}
+if(s==null){
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+}
+if(fpdecimal==null){
+return ;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(s==null){
+return ;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(s==null){
+return ;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
+synchronized(this){
 sign=-1;
+}
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
+return ;
+}
+if(s==null){
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(s==null){
+return ;
+}
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
+return ;
+}
+if(s==null){
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
+}
 }
+if(striped==null){
+return ;
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
+if(mant==null){
+return ;
+}
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(mant==null){
+return ;
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+nans=QNAN;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
-nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+nans=INFINITE;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
-nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
-sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+sign=1;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
-exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+exp=0;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+decimalFound=true;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
-p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+p=0;
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(!(s==null)){
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
+}
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
+if(!(s==null)){
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
+}
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
+if(!(s==null)){
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
+}
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+nans=QNAN;
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
-nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(true){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(true){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(true){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(true){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()==false){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())==false){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
+mant[p]=0;
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
+mant[q]=0;
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+mant[i]=0;
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
+mant[i]=0;
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
+mant[i]=0;
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
+mant[p]=0;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(striped.equals("-1")){
+return ;
+}
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-1||p==Long.MIN_VALUE){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()||p==Long.MIN_VALUE){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==offset||q==Long.MIN_VALUE){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())||p==Long.MIN_VALUE){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p!=-1||p==Long.MIN_VALUE){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal=s.replaceAll("\n","");
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
-fpdecimal=s;
+fpdecimal=(s).replace("\\","\\\\");
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+boolean negative=false;
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
-boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
-int trailingZeros=0;
 while(p>q){
+int trailingZeros=0;
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2943/pattern-ver1-serial/hadoop.order_inversion.src.main.java.org.mdp.learn.hadoop.order_inversion.pairs.CoOccurrenceMatrixMapperWithPairs.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[q++]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p++]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[q++]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q++]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
+striped[q++]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
-round((striped[q]-'0')*1000);
+round((striped[q++]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p++]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q++]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
-if(striped[p]!='0'){
+if(striped[p++]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
-round((striped[q]-'0')*1000);
+round((striped[q++]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+if(s==null){
+return ;
+}
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+q=offset;
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+decimalPos=significantDigits;
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+assert (s!=null);
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+assert (s!=null);
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
+assert (s!=null);
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
+assert (s!=null);
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+assert (field!=null);
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+assert (striped!=null);
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
+assert (!s.isEmpty());
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+assert (!s.isEmpty());
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(fpdecimal.contains(fpdecimal)){
+return ;
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(fpdecimal.contains(fpdecimal)){
+return ;
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+decimalPos=significantDigits;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+decimalPos=significantDigits;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
+decimalPos=significantDigits;
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.awt.event.WindowEvent;
+
+import java.net.URL;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
+}
 }
+if(mant==null){
+return ;
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/1495/pattern-ver1-serial/src.com.suntc.tictactoe.ClientGui.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(Double.isNaN(p)){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(Double.isNaN(p)){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(Double.isNaN(p)){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+if(s.contains(s)){
+return ;
+}
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(s.contains(s)){
+return ;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()==true){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())==true){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
+if(s!=null){
+p=s.indexOf("E");
+}
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
+if(!decimalFound){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&p!='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/947/pattern-ver1-serial/com.ge.research.sadl.jena-wrapper-for-sadl.src.main.java.com.ge.research.sadl.jena.reasoner.JenaReasonerPlugin.java-prepareSubjectPredicateObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.isEmpty()){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.IsilonCommunicationInterface.java-createUnManagedFileSystem.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()||"查看红包".equals(p)){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==offset||"查看红包".equals(q)){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-1||"查看红包".equals(p)){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())||"查看红包".equals(p)){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p!=-1||p==3){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-1||p==3){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()||p==3){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())||p==3){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<striped.length||q==3){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s!=null&&s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s!=null&&s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s!=null&&s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=1;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=-1;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&!fpdecimal.isEmpty()){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.computecontroller.impl.ucs.UcsDiscoveryWorker.java-deleteComputeLanBootImagePaths.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=0;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound&&significantDigits==0||significantDigits=='%'){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:17:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
-if(decimalFound&&q!=offset){
+if(decimalFound&&q!=offset||q=='%'){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.isEmpty()){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/exportLibraries.vnxe.src.main.java.com.emc.storageos.vnxe.VNXeApiClient.java-unexportSnap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.isEmpty()){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/exportLibraries.vnxe.src.main.java.com.emc.storageos.vnxe.VNXeApiClient.java-unexportSnap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=0;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals(POS_INFINITY_STRING)||"9".equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)||"9".equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals(NEG_INFINITY_STRING)||"9".equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=2;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.isEmpty()||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/2616/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.mapper.functions.MapNetwork.java-toNetworkRestRep.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
+mant=new int[field.getRadixDigits()];
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
+if(p==(fpdecimal.length())){
+break;
+}
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
+if(striped[p]!='0'){
+break;
+}
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
+mant=new int[field.getRadixDigits()];
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=3;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
+if(s.isEmpty()){
+s=null;
+}
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+if(s.isEmpty()){
+s=null;
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+if(s.isEmpty()){
+s=null;
+}
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+if(s.isEmpty()){
+s=null;
+}
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal!=null&&fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/3737/pattern-ver1-serial/src.com.ichi2.libanki.sync.RemoteMediaServer.java-addFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(fpdecimal!=null&&decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/3737/pattern-ver1-serial/src.com.ichi2.libanki.sync.RemoteMediaServer.java-addFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p<0||p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p<0||p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
-if(q<striped.length){
+if(q<0||q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p<0||p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+sign=(byte)1;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
-sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+sign=(byte)1;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
-sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+sign=-1;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+mant=new int[field.getRadixDigits()];
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'||fpdecimal.equals("manufacturedOn")||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+sign=(byte)1;
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
-sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+sign=(byte)1;
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
-sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+sign=-1;
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
-sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+mant=new int[field.getRadixDigits()];
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+mant=new int[field.getRadixDigits()];
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
+mant=new int[field.getRadixDigits()];
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+sign=(byte)1;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+mant=new int[field.getRadixDigits()];
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s==null||s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s==null||s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s==null||s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=(significantDigits-1+offset+offset)%offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=(offset+offset)%offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
-decimalPos=q-offset;
+decimalPos=(q-offset+offset)%offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
-sciexp=-sciexp;
+sciexp=(-sciexp+sciexp)%sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=(significantDigits+significantDigits)%significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
-q-=i;
+q-=(i+i)%i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
-decimalPos+=i;
+decimalPos+=(i+i)%i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals(POS_INFINITY_STRING)||"/preEvaluatorImpersonation".equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4389/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.base.CandidateDataController.java-assessmentReturnView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals(NEG_INFINITY_STRING)||"/preEvaluatorImpersonation".equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4389/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.base.CandidateDataController.java-assessmentReturnView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)||"/preEvaluatorImpersonation".equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4389/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.base.CandidateDataController.java-assessmentReturnView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)=='.'==false){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+sign=-1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
-sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+sign=(byte)1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
-sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+sign=(byte)1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
-sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)>=0&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==2+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+sign=(byte)1;
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
-sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+sign=(byte)1;
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
-sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if((s!=null)&&(s.equals(NAN_STRING))){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if((s!=null)&&(s.equals(POS_INFINITY_STRING))){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if((s!=null)&&(s.equals(NEG_INFINITY_STRING))){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
-q=offset;
+q=offset<0?0:offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
-decimalPos=significantDigits;
+decimalPos=significantDigits<0?0:significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
-q-=i;
+q-=i<0?0:i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
-decimalPos+=i;
+decimalPos+=i<0?0:i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=10;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if((fpdecimal.charAt(p)>='1'||fpdecimal.charAt(p)=='\'')&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
+sign=-1;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
-sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+mant=new int[field.getRadixDigits()];
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-1||p==0){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()||p==0){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())||p==0){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==offset||q==0){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=(decimalPos+sciexp);
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-1||p>9){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()||p>9){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
-if(p==(fpdecimal.length())){
+if(p==(fpdecimal.length())||p>9){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
-if(q==offset){
+if(q==offset||q>9){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=100;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+sign=-1;
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
-sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
+exp=1;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==20+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5979/pattern-ver1-serial/src.main.java.com.skiwi.ogameplanner.Building.java-getEnergyCost.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if((s!=null)&&s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/3368/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.brocade.BrocadeNetworkSystemDevice.java-getVersion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if((s!=null)&&s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/3368/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.brocade.BrocadeNetworkSystemDevice.java-getVersion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if((s!=null)&&s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/3368/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.brocade.BrocadeNetworkSystemDevice.java-getVersion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=1000;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4169/pattern-ver1-serial/src.mygame.Player.java-Player.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+sciexp=-sciexp;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+try{
 exp=(decimalPos+sciexp)/rsize;
+}finally{
+mant=new int[field.getRadixDigits()];
+}
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
+try{
 this.field=field;
+}finally{
+mant=new int[field.getRadixDigits()];
+}
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)=='.'&&fpdecimal.charAt(p)<4000000){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)=='.'&&fpdecimal.charAt(p)<4000000){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
-if(p!=-1){
+if(p!=-1&&p<4000000){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
+if(p==-1&&p<4000000){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
-if(p==fpdecimal.length()){
+if(p==fpdecimal.length()&&p<4000000){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
+mant=new int[field.getRadixDigits()];
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
+mant=new int[field.getRadixDigits()];
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+try{
 mant=new int[field.getRadixDigits()];
+}finally{
+sign=(byte)1;
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=4;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
-if(decimalFound&&q!=offset){
+if(decimalFound){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
-if(decimalFound&&significantDigits==0){
+if(decimalFound){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=5;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
-if(fpdecimal.charAt(p)=='.'){
+if(fpdecimal.charAt(p)=='.'==true){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")!=-1||fpdecimal.indexOf("-")==3){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.isEmpty()){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(fpdecimal==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(fpdecimal==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+if(field==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
+}
+if(s==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+}
+if(fpdecimal==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(p>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
+}
+if("e"==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+}
+if("-"==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal!=null&&fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
+p=s.indexOf("E");
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
+}
 }
+if(p<=0){
+p=1;
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(p<=0){
+p=1;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(q<=0){
+q=1;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
+}
 }
+if(i<=0){
+i=1;
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(significantDigits<=0){
+significantDigits=1;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
+p=s.indexOf("E");
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")<0||fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+sign=(byte)-1;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
-sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length+rsize*offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
+p=significantDigits+1*offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+}
+if(p<0){
+p=0;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
+if(exp<0){
+exp=0;
+}
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(striped[q]<0){
+striped[q]=0;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
+if(nans<0){
+nans=0;
+}
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+if(sign<0){
+sign=0;
+}
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+exp=0;
+if(exp<0){
 exp=0;
+}
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
+p=0;
+if(p<0){
 p=0;
+}
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+sign=(byte)-1;
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")!=-1==false){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
+if(negative){
+sciexp=-sciexp;
+}
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+p=s.indexOf("E");
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
+p=s.indexOf("E");
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
+p=s.indexOf("E");
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.matches("/+[\\w\\.\\d/]+.*")){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
+p=s.indexOf("E");
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+sign=(byte)-1;
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
-sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
+p=s.indexOf("E");
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
+}
 }
+if(p==100){
+p=0;
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(p==100){
+p=0;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(q==100){
+q=0;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
+}
 }
+if(i==100){
+i=0;
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")!=-1&&fpdecimal.indexOf("-")<4000000){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+try{
 mant=new int[field.getRadixDigits()];
+}finally{
+sign=(byte)-1;
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.contains(".")){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2868/pattern-ver1-serial/src.main.java.play.templates.GroovyTemplate.java-invokeTag.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
-if(fpdecimal.indexOf("-")!=-1){
+if(fpdecimal.indexOf("-")!=-1==true){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7677/pattern-ver1-serial/app.src.main.java.soft.swenggroup5.CameraActivity.java-finalQRReceived.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==0){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)=='0'||"查看红包".equals(decimalFound)){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
+synchronized(this){
 sign=(byte)1;
 nans=QNAN;
 return ;
+}
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
+synchronized(this){
 sign=(byte)1;
 nans=INFINITE;
 return ;
+}
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(!decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)=='0'||fpdecimal.charAt(p)=='%'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
-while(p>q){
+while(p>q||p>>>3>0){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6215/pattern-ver1-serial/java.src.Bin.java-pack_integer.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
-while((p-q)<(mant.length*rsize)){
+while((p-q)<(mant.length*rsize)||(p-q)>>>3>0){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6215/pattern-ver1-serial/java.src.Bin.java-pack_integer.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
+import java.util.Iterator;
+
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==-1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
+striped[q]=fpdecimal.charAt(p);
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
-striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(true){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)=='0'==false){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
-mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
+if(mant!=new int[field.getRadixDigits()]){
 exp=(decimalPos+sciexp)/rsize;
+}
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
+striped[q]=fpdecimal.charAt(p);
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==4){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
+striped[q]=fpdecimal.charAt(p);
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==5){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)||s.trim().equals(NAN_STRING.trim())){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/720/pattern-ver1-serial/FileDownloader.src.main.java.org.wlf.filedownloader.DownloadFileChangeObserver.java-onDownloadFileUpdated.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
-if(s.equals(POS_INFINITY_STRING)){
+if(s.equals(POS_INFINITY_STRING)||s.trim().equals(POS_INFINITY_STRING.trim())){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/720/pattern-ver1-serial/FileDownloader.src.main.java.org.wlf.filedownloader.DownloadFileChangeObserver.java-onDownloadFileUpdated.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NEG_INFINITY_STRING)){
+if(s.equals(NEG_INFINITY_STRING)||s.trim().equals(NEG_INFINITY_STRING.trim())){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/720/pattern-ver1-serial/FileDownloader.src.main.java.org.wlf.filedownloader.DownloadFileChangeObserver.java-onDownloadFileUpdated.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
- final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+ final char[] striped=new char[(getRadixDigits()*rsize+offset*2)];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/3688/pattern-ver1-serial/src.main.java.erogenousbeef.bigreactors.common.multiblock.MultiblockReactor.java-changeAllControlRodInsertionValues.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==9){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4103/pattern-ver1-serial/src.eu.hansolo.enzo.qlocktwo.QlockGerman.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if(decimalFound&&fpdecimal.charAt(p)=='0'==true){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
+if(fpexp==null){
+throw new IllegalStateException("User isn't registered! "+s);
+}
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+if(mant==null){
+throw new IllegalStateException("User isn't registered! "+field);
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(striped==null){
+throw new IllegalStateException("User isn't registered! "+rsize);
+}
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(striped==null){
+throw new IllegalStateException("User isn't registered! "+offset);
+}
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+1+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+1+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
+synchronized(this){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
+}
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
+round((striped[q]-'0')*1000);
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
+round((striped[q]-'0')*1000);
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
+round((striped[q]-'0')*1000);
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+round((striped[q]-'0')*1000);
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
+round((striped[q]-'0')*1000);
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
+round((striped[q]-'0')*1000);
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
+round((striped[q]-'0')*1000);
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
+round((striped[q]-'0')*1000);
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
-round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+3+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
+round((striped[q]-'0')*1000);
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
+round((striped[q]-'0')*1000);
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
+round((striped[q]-'0')*1000);
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
+round((striped[q]-'0')*1000);
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
+round((striped[q]-'0')*1000);
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
+round((striped[q]-'0')*1000);
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+2+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
+round((striped[q]-'0')*1000);
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
+round((striped[q]-'0')*1000);
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+round((striped[q]-'0')*1000);
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
+round((striped[q]-'0')*1000);
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
+round((striped[q]-'0')*1000);
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
+round((striped[q]-'0')*1000);
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
+round((striped[q]-'0')*1000);
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
+round((striped[q]-'0')*1000);
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
+round((striped[q]-'0')*1000);
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
+round((striped[q]-'0')*1000);
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q!=0){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
+if(s.startsWith("\r\n")){
+s=s.substring(2);
+}
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
+if(s.startsWith("\r\n")){
+s=s.substring(2);
+}
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
+if(s.startsWith("\r\n")){
+s=s.substring(2);
+}
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
+if(s.startsWith("\r\n")){
+s=s.substring(2);
+}
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+exp=(decimalPos+sciexp)/rsize;
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
+exp=(decimalPos+sciexp)/rsize;
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
-exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
+p=significantDigits-1+offset;
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
-p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+4+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+4+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
+if(s.startsWith("/")){
+s=s.substring(1);
+}
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
+}
+if(s.startsWith("/")){
+s=s.substring(1);
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(sciexp<0){
+sciexp=0;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(decimalPos<0){
+decimalPos=0;
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(sciexp<0){
+sciexp=0;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(significantDigits<0){
+significantDigits=0;
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(sciexp<0){
+sciexp=0;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
+if(trailingZeros<0){
+trailingZeros=0;
+}
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(decimalPos<0){
+decimalPos=0;
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(significantDigits<0){
+significantDigits=0;
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(decimalPos<0){
+decimalPos=0;
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
+if(trailingZeros<0){
+trailingZeros=0;
+}
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+1||"查看红包".equals(q)){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+1||q==3){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
-int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+int i=(rsize*100)-decimalPos-sciexp%rsize*100%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q<0||q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+1||q==Long.MIN_VALUE){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
+haveBreadCrumbs=true;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
+haveBreadCrumbs=true;
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
+haveBreadCrumbs=true;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
+haveBreadCrumbs=true;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
+haveBreadCrumbs=true;
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
+haveBreadCrumbs=true;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
+haveBreadCrumbs=true;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
+haveBreadCrumbs=true;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
+boolean haveBreadCrumbs=false;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
-if(s.equals(NAN_STRING)){
+if(s.equals(NAN_STRING)&&haveBreadCrumbs){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
+haveBreadCrumbs=true;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+1||q==0){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(q==mant.length*rsize+offset+1||q>9){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
-if(q==mant.length*rsize+offset+1){
+if(Double.isNaN(q)){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
-if(p==-1){
-p=s.indexOf("E");
-}
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
+if(p==-1){
+p=s.indexOf("E");
+}
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
+}
+if(decimalFound&&fpdecimal.charAt(p)=='0'){
+decimalPos--;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
+}
+if(decimalFound&&fpdecimal.charAt(p)=='0'){
+decimalPos--;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<0){
+p--;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+if(i<0){
+i--;
+}
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<0){
+p--;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
+}
+if(i<0){
+i--;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<0){
+p--;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
+if(p<0){
+p--;
+}
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<0){
+p--;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(sciexp<0){
+sciexp--;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'||fpdecimal.charAt(p)=='%'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'||fpdecimal.charAt(p)=='%'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'==false){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
+}else {
+significantDigits--;
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)<'0'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
+}else {
+if(null==s||s.equals("")){
+fpdecimal="null";
 }else {
 fpdecimal=s;
+}
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/3929/pattern-ver1-serial/modules.andes-core.broker.src.main.java.org.wso2.andes.kernel.disruptor.inbound.QueueInfo.java-QueueInfo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
 significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if(fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6852/pattern-ver1-serial/vipr-portal.portal.app.controllers.tenant.TenantSelector.java-renderTenantOptionsForVcenters.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'==true){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
+if(s==null||field==null||striped==null){
+return ;
+}
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
+if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+break;
+}
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+if(p==0&&i==0&&mant.equals("")){
+return ;
+}
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p==0&&rsize==0&&mant.equals("")){
+return ;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p==0&&offset==0&&mant.equals("")){
+return ;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(p==0&&sciexp==0&&mant.equals("")){
+return ;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
+if(p==0&&q==0&&mant.equals("")){
+return ;
+}
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<3){
+p=3;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
+if(i<3){
+i=3;
+}
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<3){
+p=3;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
+if(sciexp<3){
+sciexp=3;
+}
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<3){
+p=3;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
+if(q<3){
+q=3;
+}
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<3){
+p=3;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
+if(decimalPos<3){
+decimalPos=3;
+}
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<3){
+p=3;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+if(significantDigits<3){
+significantDigits=3;
+}
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
+if(p<3){
+p=3;
+}
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
+if(trailingZeros<3){
+trailingZeros=3;
+}
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
+if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+p++;
+continue;
+}
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
-nans=INFINITE;
+nans=QNAN;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
-nans=QNAN;
+nans=INFINITE;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
-sign=(byte)-1;
-nans=INFINITE;
+sign=(byte)1;
+nans=QNAN;
 return ;
 }
 if(s.equals(NAN_STRING)){
-sign=(byte)1;
-nans=QNAN;
+sign=(byte)-1;
+nans=INFINITE;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
-sign=(byte)1;
+sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
-sign=(byte)-1;
+sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
-}
-if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
-significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 0, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
-if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
+if((fpdecimal.charAt(p)>='1')&&(fpdecimal.charAt(p)<='9')){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if((decimalFound)&&(fpdecimal.charAt(p)=='0')){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
-if(decimalFound&&fpdecimal.charAt(p)=='0'){
+if((decimalFound)&&(fpdecimal.charAt(p)=='0')){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
-if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
+if((fpdecimal.charAt(p)<'0')||(fpdecimal.charAt(p)>'9')){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
-}
-if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
-significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
+if(decimalFound&&q!=offset){
+for(;;){
+q--;
+if(q==offset){
+break;
+}
+if(striped[q]=='0'){
+significantDigits--;
+}else {
+break;
+}
+}
+}
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
-}
-if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
-significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
+if(decimalFound&&q!=offset){
+for(;;){
+q--;
+if(q==offset){
+break;
+}
+if(striped[q]=='0'){
+significantDigits--;
+}else {
+break;
+}
+}
+}
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
+for(;;){
+if(decimalFound&&q!=offset){
 for(;;){
+q--;
+if(q==offset){
+break;
+}
+if(striped[q]=='0'){
+significantDigits--;
+}else {
+break;
+}
+}
+}
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
-}
-if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
-significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(decimalFound&&significantDigits==0){
+decimalPos=0;
+}
+if(!decimalFound){
+decimalPos=q-offset;
 }
+q=offset;
+p=significantDigits-1+offset;
+int trailingZeros=0;
+while(p>q){
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
-}
-}
 }
-if(decimalFound&&significantDigits==0){
-decimalPos=0;
 }
-if(!decimalFound){
-decimalPos=q-offset;
 }
-q=offset;
-p=significantDigits-1+offset;
-int trailingZeros=0;
-while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
-}
-if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
-significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
+if(decimalFound&&q!=offset){
+for(;;){
+q--;
+if(q==offset){
+break;
+}
+if(striped[q]=='0'){
+significantDigits--;
+}else {
+break;
+}
+}
+}
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
-}
-if(decimalFound&&q!=offset){
-for(;;){
-q--;
-if(q==offset){
-break;
-}
-if(striped[q]=='0'){
-significantDigits--;
-}else {
-break;
-}
-}
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
+if(decimalFound&&q!=offset){
+for(;;){
+q--;
+if(q==offset){
+break;
+}
+if(striped[q]=='0'){
+significantDigits--;
+}else {
+break;
+}
+}
+}
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
+}
+if(decimalFound&&significantDigits==0){
+decimalPos=0;
 }
+if(!decimalFound){
+decimalPos=q-offset;
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
-}
 }
 }
-if(decimalFound&&significantDigits==0){
-decimalPos=0;
 }
-if(!decimalFound){
-decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+mant[28]=(byte)0x88;
+mant[29]=0x58;
+mant[30]=0x01;
+mant[31]=0x00;
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
+for(int i=0;i<4;i++){
+mant[i]=Math.min(1,Math.max(0,mant[i]));
+}
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
+}
+if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
+sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 1, DEL : 22
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=3;
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/101/pattern-ver1-serial/PageRank.PageRank.java-PageRank.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 31, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
 fpdecimal=s.substring(0,p);
 String fpexp=s.substring(p+1);
 boolean negative=false;
 for(int i=0;i<fpexp.length();i++){
 if(fpexp.charAt(i)=='-'){
 negative=true;
 continue;
 }
 if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
 sciexp=sciexp*10+fpexp.charAt(i)-'0';
 }
 }
 if(negative){
 sciexp=-sciexp;
 }
 }else {
 fpdecimal=s;
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
-mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
+mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10;
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 31, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_59_buggy/src/main/java/org/apache/commons/math/dfp/Dfp.java[326,530]
------------Candidate---------------
 protected Dfp(DfpField field,String s){
 mant=new int[field.getRadixDigits()];
 sign=1;
 exp=0;
 nans=FINITE;
 this.field=field;
 boolean decimalFound=false;
  final int rsize=4;
  final int offset=4;
  final char[] striped=new char[getRadixDigits()*rsize+offset*2];
 if(s.equals(POS_INFINITY_STRING)){
 sign=(byte)1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NEG_INFINITY_STRING)){
 sign=(byte)-1;
 nans=INFINITE;
 return ;
 }
 if(s.equals(NAN_STRING)){
 sign=(byte)1;
 nans=QNAN;
 return ;
 }
 int p=s.indexOf("e");
 if(p==-1){
 p=s.indexOf("E");
 }
  final String fpdecimal;
 int sciexp=0;
 if(p!=-1){
-fpdecimal=s.substring(0,p);
-String fpexp=s.substring(p+1);
-boolean negative=false;
-for(int i=0;i<fpexp.length();i++){
-if(fpexp.charAt(i)=='-'){
-negative=true;
-continue;
-}
-if(fpexp.charAt(i)>='0'&&fpexp.charAt(i)<='9'){
-sciexp=sciexp*10+fpexp.charAt(i)-'0';
-}
-}
-if(negative){
-sciexp=-sciexp;
-}
-}else {
 fpdecimal=s;
+}else {
+fpdecimal=s.substring(0,p);
 }
 if(fpdecimal.indexOf("-")!=-1){
 sign=-1;
 }
 p=0;
 int decimalPos=0;
 for(;;){
 if(fpdecimal.charAt(p)>='1'&&fpdecimal.charAt(p)<='9'){
 break;
 }
 if(decimalFound&&fpdecimal.charAt(p)=='0'){
 decimalPos--;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 }
 p++;
 if(p==fpdecimal.length()){
 break;
 }
 }
 int q=offset;
 striped[0]='0';
 striped[1]='0';
 striped[2]='0';
 striped[3]='0';
 int significantDigits=0;
 for(;;){
 if(p==(fpdecimal.length())){
 break;
 }
 if(q==mant.length*rsize+offset+1){
 break;
 }
 if(fpdecimal.charAt(p)=='.'){
 decimalFound=true;
 decimalPos=significantDigits;
 p++;
 continue;
 }
 if(fpdecimal.charAt(p)<'0'||fpdecimal.charAt(p)>'9'){
 p++;
 continue;
 }
 striped[q]=fpdecimal.charAt(p);
 q++;
 p++;
 significantDigits++;
 }
 if(decimalFound&&q!=offset){
 for(;;){
 q--;
 if(q==offset){
 break;
 }
 if(striped[q]=='0'){
 significantDigits--;
 }else {
 break;
 }
 }
 }
 if(decimalFound&&significantDigits==0){
 decimalPos=0;
 }
 if(!decimalFound){
 decimalPos=q-offset;
 }
 q=offset;
 p=significantDigits-1+offset;
 int trailingZeros=0;
 while(p>q){
 if(striped[p]!='0'){
 break;
 }
 trailingZeros++;
 p--;
 }
 int i=((rsize*100)-decimalPos-sciexp%rsize)%rsize;
 q-=i;
 decimalPos+=i;
 while((p-q)<(mant.length*rsize)){
 for(i=0;i<rsize;i++){
 striped[++p]='0';
 }
 }
 for(i=mant.length-1;i>=0;i--){
 mant[i]=(striped[q]-'0')*1000+(striped[q+1]-'0')*100+(striped[q+2]-'0')*10+(striped[q+3]-'0');
 q+=4;
 }
 exp=(decimalPos+sciexp)/rsize;
 if(q<striped.length){
 round((striped[q]-'0')*1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.util.FastMathTest::testMinMaxFloat]
---------START : 2019.09.06 AD at 21:30:49 CDT
---------TIME : 2019.09.07 AD at 02:30:53 CDT
--------------- END -----------------
Finish : math-59 > patch : 0 | Start : Fri Sep 06 21:30:49 CDT 2019 | End : 2019.09.07 AD at 02:30:53 CDT
